[{"title": "Memos &amp; n8n ，秒接入 AI", "author": "林木木的博客", "pubDate": "2024-12-18 13:30:36", "link": "https://immmmm.com/get-ai-memos/", "description": "\n<p>Memos 0.18 还是哪个版本开始就支持 webhook ，一直不知道有啥用。自从折腾了 n8n，发现能连通，而且也自用有段时间。</p>\n<p>自动化流程思路是：接收 Memos Webhook，判断是新建事件，判断首行是否有 <code>触发词</code>，进入对应流程修改当前条笔记。</p>\n<h3>演示之一</h3>\n<p><code>a修改</code> 接内容，触发✌️</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/SCR-20241218-suku.png.webp\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/SCR-20241218-supf.png.webp\" alt=\"\"></p>\n<h3>使用简要说明</h3>\n<p>安装 n8n 之后，下载 <a href=\"https://n8n.akashio.com/b121c42b66fe4963925baa70de007dd6\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Memos_v0_22_3__share.json</a>，其它版本需自行微调。</p>\n<h3>修改授权信息</h3>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/SCR-20241218-swwj.png.webp\" alt=\"\"></p>\n<h3>复制 Webhook 节点链接</h3>\n<p>粘贴到 Memos 设置 <code>偏好设置</code> 内。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/SCR-20241218-tdak.png.webp\" alt=\"\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/SCR-20241218-teap.png.webp\" alt=\"\"></p>\n<h3>根据需要可修改触发词</h3>\n<p>基于正则匹配。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/SCR-20241218-swol.png.webp\" alt=\"\"></p>\n<h2>后记</h2>\n<p>拓展性极强，当日常使用次数极少，不太习惯……</p>\n<p>其它更多的拓展一个思路，对于有 webhook 或 api 接口，都能非常方便接入 n8n 做联动 💪</p>\n", "categories": ["%E6%8A%98%E8%85%BE"], "time": 1734499836}, {"title": "正在使用的 Docker 清单", "author": "林木木的博客", "pubDate": "2024-12-08 09:16:41", "link": "https://immmmm.com/my-docker-list/", "description": "\n<p>9 月底TX轻量云搞活动 ¥159x2 新开了 2C4G 机子，比起大几千的续费，便宜太多太多。</p>\n<p>试了试整站镜像备份还原，但被告知新机器的硬盘（70GB）比原来的（80GB）小，不行。</p>\n<p>搁置两月，趁着阴天降温宅家，花了一下午，迁移完毕。🎉</p>\n<h3><a href=\"https://github.com/soulteary/docker-flare\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Flare</a></h3>\n<p>超级轻量、快速、美观的个人导航页面，还支持前端编辑。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/flare-editor-beta.png.webp\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/flare-ui.png.webp\" alt=\"\"></p>\n<h3><a href=\"https://github.com/Rock-Candy-Tea/hexo-circle-of-friends\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">友链朋友圈</a></h3>\n<p>古早博客功能，个人的首页调用和友圈都是基于此。</p>\n<p>刚发现后继有人，已经有了轻量版本。</p>\n<h3><a href=\"https://github.com/cooderl/wewe-rss\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">WeWe RSS</a></h3>\n<p>更优雅的微信公众号订阅方式。部署之后登录自己的微信读书账号，个人已稳定运行大半年。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/wewerss.png.webp\" alt=\"\"></p>\n<h3><a href=\"https://github.com/usememos/memos\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Memos</a></h3>\n<p>挺好的随记工具，但不兼容更新频繁，停留在 v0.18.2 安逸。博客首页调用、哔哔广场都基于此。</p>\n\n\n\n\n\t\n\n\n<div class=\"post-preview\">\n  <div class=\"post-preview--meta\">\n    <div class=\"post-preview--middle\">\n      <h4 class=\"post-preview--title\">\n        <a target=\"_blank\" href=\"https://immmmm.com/memobbs-app/\">哔哔广场.app</a>\n      </h4>\n      <time class=\"post-preview--date\">2024-01-21</time><small>#折腾 </small>\n      \n      <section class=\"post-preview--excerpt\">\n        基于 @归臧 的 Memos 样式和功能，在 @koobai 无限需求之下，连肝一周并败入域名解析之: https://memobbs.app/\n折腾核心动力：颜值在线！\n满足核心需求：Memos&amp;rsquo;er 共舞~\n\n      </section>\n</div>\n  </div>\n  \n    <img rel=\"link\" loading=\"lazy\" class=\"post-preview--image avatar\" src=\"https://r2.immmmm.com/2024/01/bbv3.png.webp\">\n</div>\n\n<h3><a href=\"https://github.com/twikoojs/twikoo\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Twikoo</a></h3>\n<p>一个简洁、安全、免费的静态网站评论系统。配置和评论数据迁移起来真方便。</p>\n<h3><a href=\"https://github.com/stilleshan/frps\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">stilleshan/frps</a></h3>\n<p>网穿透服务，原版怎么都不行，用这个分分钟搞定。</p>\n\n\n\n\n\t\n\n\n<div class=\"post-preview\">\n  <div class=\"post-preview--meta\">\n    <div class=\"post-preview--middle\">\n      <h4 class=\"post-preview--title\">\n        <a target=\"_blank\" href=\"https://immmmm.com/install-frp-record/\">迁移 FRP 记录</a>\n      </h4>\n      <time class=\"post-preview--date\">2024-11-10</time><small>#折腾 </small>\n      \n      <section class=\"post-preview--excerpt\">\n        （旧文重更：2024/11/10）\n服务器到期在即，迁移 FRP 小记，为了把家里的 书库 talebook 能无障碍在线使用。\n群晖拉起 frpc，服务器部署 frps，路由器端口转发，给个子域名解析，即可实现域名访问服务。\n\n      </section>\n</div>\n  </div>\n  \n    <img rel=\"link\" loading=\"lazy\" class=\"post-preview--image avatar\" src=\"https://r2.immmmm.com/2024/11/SCR-20241110-kfqf.png.webp\">\n</div>\n\n<h3><a href=\"https://umami.is/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Umami</a></h3>\n<p>一个高颜值可自部署的统计应用，还支持前端调用数据。</p>\n\n\n\n\n\t\n\n\n<div class=\"post-preview\">\n  <div class=\"post-preview--meta\">\n    <div class=\"post-preview--middle\">\n      <h4 class=\"post-preview--title\">\n        <a target=\"_blank\" href=\"https://immmmm.com/hi-umami-api/\">前端调用 Umami API 数据</a>\n      </h4>\n      <time class=\"post-preview--date\">2024-11-10</time><small>#折腾 </small>\n      \n      <section class=\"post-preview--excerpt\">\n        Umami 一个高颜值可自部署的统计应用。\n看着服务器负载常年低于10%，有一点点需求的应用，特别是能 Docker 部署的，全都安排上！看着基本的统计数据都有。不错不错！但，能直接 API 前端调用统计数据不？可以的，接口见官网： https://umami.is/docs/api\n\n      </section>\n</div>\n  </div>\n  \n    <img rel=\"link\" loading=\"lazy\" class=\"post-preview--image avatar\" src=\"https://r2.immmmm.com/2023/06/umami-im.png\">\n</div>\n\n<h3><a href=\"https://github.com/wy580477/musicn-container\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">musicn-container</a></h3>\n<p>可播放及下载音乐的命令行工具 musicn 的容器版本，支持 amd64/arm64 架构。偶尔用来下载个 MP3。</p>\n<h3><a href=\"https://github.com/n8n-io/n8n\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">n8n</a></h3>\n<p>免费自部署低代码平台，比如用来接入 <a href=\"https://n8n.akashio.com/b121c42b66fe4963925baa70de007dd6\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Memos AI 助理</a>，追踪微信公众号更新并生成 AI 日报等。</p>\n\n\n\n\n\t\n\n\n<div class=\"post-preview\">\n  <div class=\"post-preview--meta\">\n    <div class=\"post-preview--middle\">\n      <h4 class=\"post-preview--title\">\n        <a target=\"_blank\" href=\"https://immmmm.com/hi-n8n/\">我应该是最后一个才知道有 n8n 这个东西的人吧</a>\n      </h4>\n      <time class=\"post-preview--date\">2024-08-01</time><small>#折腾 </small>\n      \n      <section class=\"post-preview--excerpt\">\n        借用 @heo 某篇文章的句式，表达一下对 n8n 的惊叹之感！不搜不知道，一搜吓一跳。\n小众软件19年10月、少数派 @珪璋 去年5月、@OSEN今年1月、@lcomplete 今年4月，以及我最最后才从 @汐笺 知道的 n8n 中文教程。\n\n      </section>\n</div>\n  </div>\n  \n    <img rel=\"link\" loading=\"lazy\" class=\"post-preview--image avatar\" src=\"https://r2.immmmm.com/2024/08/SCR-20240801-mgzr.png.webp\">\n</div>\n\n<h3><a href=\"https://github.com/talebook/talebook\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Talebook</a></h3>\n<p>以下几个 Docker 都部署在 NAS 里。</p>\n<p>基于 Calibre 简单的个人图书管理系统，各方面都比 calibre-web 好用。而且 Talebook 可以直接读取 Calibre 数据库，日常通过本地连接 NAS 管理书籍，结合 frpc 穿透绑上域名，供好友自取，还内置了 opds 功能，手机用 KyBooks3 APP 顺利实现 APP 内检索下载阅读。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/12/ds-docker-5.jpg.jpeg.webp\" alt=\"\"></p>\n<h3>vaultwarden</h3>\n<p>Bitwarden 自部署镜像。</p>\n<h3><a href=\"https://ghost.org/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Ghost</a></h3>\n<p>用作家庭内部图片博客，基本上是整理照片时，随手丢上去更新一下。回头翻翻，把美好瞬间记录也是件美好的事。</p>\n<p>停留在 5.8.3 版本，因为这是 sqlite3 的最高版本，再高需要另外部署 MySQL 8。</p>\n<h3><a href=\"https://github.com/Sitoi/dailycheckin\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">DailyCheckIn</a></h3>\n<p>基于「Docker」/「青龙面板」/「群晖」/「本地」的每日签到脚本。</p>\n", "categories": ["%E6%8A%98%E8%85%BE"], "time": 1733620601}, {"title": "自制 iOS 小组件，随机显示一条 Memos", "author": "林木木的博客", "pubDate": "2024-11-25 14:42:06", "link": "https://immmmm.com/diy-ios-widget/", "description": "\n<p>借助古早 Scriptable 玩了玩自制 iOS 小组件，实现随机显示一条 Memos。</p>\n<h3>更多预览</h3>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/11/Picsew_20241127210242.jpg.webp\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/11/Picsew_20241127210258.jpg.webp\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/11/Picsew_20241127210232.jpg.webp\" alt=\"\"></p>\n<h3>简要步骤</h3>\n<p>iPhone 上下载 <a href=\"https://apps.apple.com/cn/app/scriptable/id1405459188\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Scriptable</a> App（需 iOS14+）.</p>\n<p>打开App，点击右上角 + 号，复制代码，修改个人信息，保存。</p>\n<p>长按桌面，添加组件，选择 Scriptable，然后点击组件配置，选择刚刚保存的脚本即可.</p>\n<h3>注意事项</h3>\n<p>注意：基于 Memos v0.18 api v1 借口.</p>\n<p>自行测试如下链接是否有数据返回，再使用。</p>\n<pre tabindex=\"0\"><code>https://me.edui.fun/api/v1/memo/stats?creatorId=101\nhttps://me.edui.fun/api/v1/memo?creatorId=101&amp;limit=1&amp;offset=3\n</code></pre>\n<h3>代码如下</h3>\n<p>修改前两行的个人信息。</p>\n<div class=\"highlight\"><pre tabindex=\"0\"><code class=\"language-javascript\" data-lang=\"javascript\"><span><span><span>//v2024.11.27晚 点击主体文字，跳转到 Memos 单条网页\n</span></span></span><span><span><span></span>\n</span></span><span><span><span>let</span> <span>memosUrl</span> <span>=</span> <span>\"https://me.edui.fun\"</span>\n</span></span><span><span><span>let</span> <span>memosUserID</span> <span>=</span> <span>\"101\"</span>\n</span></span><span><span>\n</span></span><span><span><span>// 刷新间隔时间，默认 60 分钟\n</span></span></span><span><span><span></span><span>const</span> <span>refreshInterval</span> <span>=</span> <span>60</span>\n</span></span><span><span><span>const</span> <span>widget</span> <span>=</span> <span>await</span> <span>createWidget</span>()\n</span></span><span><span><span>let</span> <span>nextRefresh</span> <span>=</span> Date.<span>now</span>() <span>+</span> <span>1000</span> <span>*</span> <span>60</span> <span>*</span> parseInt(<span>refreshInterval</span>)\n</span></span><span><span><span>widget</span>.<span>refreshAfterDate</span> <span>=</span> <span>new</span> Date(<span>nextRefresh</span>)\n</span></span><span><span>\n</span></span><span><span><span>Script</span>.<span>setWidget</span>(<span>widget</span>)\n</span></span><span><span><span>Script</span>.<span>complete</span>()\n</span></span><span><span>\n</span></span><span><span><span>async</span> <span>function</span> <span>createWidget</span>() {\n</span></span><span><span>  <span>let</span> <span>widget</span> <span>=</span> <span>new</span> <span>ListWidget</span>()\n</span></span><span><span>  <span>const</span> <span>memosData</span> <span>=</span> <span>await</span> <span>getData</span>()\n</span></span><span><span>  <span>let</span> <span>memoOne</span> <span>=</span> <span>memosData</span>[<span>0</span>];\n</span></span><span><span>  <span>const</span> <span>wrap</span> <span>=</span> <span>widget</span>.<span>addStack</span>()\n</span></span><span><span>  <span>wrap</span>.<span>spacing</span> <span>=</span> <span>5</span>\n</span></span><span><span>  <span>wrap</span>.<span>topAlignContent</span>()\n</span></span><span><span>\n</span></span><span><span>  <span>if</span> (<span>memoOne</span>.<span>resourceList</span> <span>&amp;&amp;</span> <span>memoOne</span>.<span>resourceList</span>.<span>length</span> <span>&gt;</span> <span>0</span> <span>&amp;&amp;</span> \n</span></span><span><span><span>config</span>.<span>widgetFamily</span> <span>!=</span> <span>'small'</span>) {\n</span></span><span><span>    <span>wrap</span>.<span>layoutHorizontally</span>()\n</span></span><span><span>    <span>widget</span>.<span>setPadding</span>(<span>10</span>, <span>10</span>, <span>10</span>, <span>10</span>)\n</span></span><span><span>\n</span></span><span><span>    <span>const</span> <span>gradient</span> <span>=</span> <span>new</span> <span>LinearGradient</span>();\n</span></span><span><span>    <span>gradient</span>.<span>locations</span> <span>=</span> [<span>0</span>, <span>1</span>];\n</span></span><span><span>    <span>gradient</span>.<span>colors</span> <span>=</span> [<span>new</span> <span>Color</span>(<span>\"#121212\"</span>, <span>0.7</span>), <span>new</span> <span>Color</span>(<span>\"#212A37\"</span>, <span>0.8</span>)];\n</span></span><span><span>    <span>widget</span>.<span>backgroundGradient</span> <span>=</span> <span>gradient</span>;\n</span></span><span><span>\n</span></span><span><span>    <span>const</span> <span>column0</span> <span>=</span> <span>wrap</span>.<span>addStack</span>()\n</span></span><span><span>    <span>column0</span>.<span>layoutVertically</span>()\n</span></span><span><span>\n</span></span><span><span>      <span>let</span> <span>resourceList</span> <span>=</span> <span>memoOne</span>.<span>resourceList</span>;\n</span></span><span><span>      <span>let</span> <span>imgUrl</span> <span>=</span> <span>''</span>,<span>imgLink</span> <span>=</span> <span>''</span>, <span>fileId</span> <span>=</span> <span>''</span>;\n</span></span><span><span>      <span>let</span> <span>restype</span> <span>=</span> <span>resourceList</span>[<span>0</span>].<span>type</span>.<span>slice</span>(<span>0</span>, <span>5</span>);\n</span></span><span><span>      <span>let</span> <span>resexlink</span> <span>=</span> <span>resourceList</span>[<span>0</span>].<span>externalLink</span>;\n</span></span><span><span>      <span>if</span> (<span>resexlink</span>) {\n</span></span><span><span>        <span>imgLink</span> <span>=</span> <span>resexlink</span>\n</span></span><span><span>      } <span>else</span> {\n</span></span><span><span>        <span>fileId</span> <span>=</span> <span>resourceList</span>[<span>0</span>].<span>id</span>;\n</span></span><span><span>        <span>if</span>(<span>resourceList</span>[<span>0</span>].<span>uid</span> <span>!==</span> <span>undefined</span>){\n</span></span><span><span>          <span>fileId</span> <span>=</span> <span>resourceList</span>[<span>0</span>].<span>uid</span>\n</span></span><span><span>        }<span>else</span> <span>if</span>(<span>resourceList</span>[<span>0</span>].<span>name</span> <span>!==</span> <span>undefined</span>){\n</span></span><span><span>          <span>fileId</span> <span>=</span> <span>resourceList</span>[<span>0</span>].<span>name</span><span>+</span><span>\"?thumbnail=1\"</span>\n</span></span><span><span>        }\n</span></span><span><span>        <span>imgLink</span> <span>=</span> <span>`</span><span>${</span><span>memosUrl</span><span>}</span><span>o/r/</span><span>${</span><span>fileId</span><span>}</span><span>`</span>;\n</span></span><span><span>      }\n</span></span><span><span>      <span>if</span> (<span>restype</span> <span>==</span> <span>'image'</span>) {\n</span></span><span><span>          <span>imgUrl</span> <span>=</span> <span>imgLink</span>;\n</span></span><span><span>      }\n</span></span><span><span>      <span>if</span> (<span>imgUrl</span>) {\n</span></span><span><span>        <span>let</span> <span>ImgStack</span> <span>=</span> <span>column0</span>.<span>addStack</span>()\n</span></span><span><span>        <span>const</span> <span>memoIMG</span> <span>=</span> <span>await</span> <span>new</span> <span>Request</span>(<span>imgUrl</span>).<span>loadImage</span>();\n</span></span><span><span>        <span>let</span> <span>imgCover</span> <span>=</span> <span>ImgStack</span>.<span>addImage</span>(<span>memoIMG</span>)\n</span></span><span><span>        <span>imgCover</span>.<span>leftAlignImage</span>()\n</span></span><span><span>        <span>imgCover</span>.<span>containerRelativeShape</span> <span>=</span> <span>true</span>\n</span></span><span><span>        <span>imgCover</span>.<span>applyFittingContentMode</span>()\n</span></span><span><span>      }\n</span></span><span><span>  }<span>else</span>{\n</span></span><span><span>    <span>wrap</span>.<span>setPadding</span>(<span>5</span>, <span>0</span>, <span>5</span>, <span>0</span>)\n</span></span><span><span>\n</span></span><span><span>    <span>const</span> <span>img</span> <span>=</span> <span>await</span> <span>new</span> <span>Request</span>(<span>'https://api.dujin.org/bing/1366.php'</span>).<span>loadImage</span>();\n</span></span><span><span>    <span>widget</span>.<span>backgroundImage</span> <span>=</span> <span>await</span> <span>shadowImage</span>(<span>img</span>)\n</span></span><span><span>    \n</span></span><span><span>  }\n</span></span><span><span>\n</span></span><span><span>  <span>const</span> <span>column1</span> <span>=</span> <span>wrap</span>.<span>addStack</span>()\n</span></span><span><span>  <span>column1</span>.<span>layoutVertically</span>()\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>TimeStack</span> <span>=</span> <span>column1</span>.<span>addStack</span>()\n</span></span><span><span>  <span>TimeStack</span>.<span>topAlignContent</span>()\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>memoTime</span> <span>=</span> <span>new</span> Date(<span>memosData</span>[<span>0</span>].<span>createdTs</span> <span>*</span> <span>1000</span> <span>-</span> <span>5</span> ).<span>toLocaleString</span>()\n</span></span><span><span>  <span>memoTime</span> <span>=</span> <span>memoTime</span>.<span>replace</span>(<span>/.{3}$/</span>, <span>''</span>)\n</span></span><span><span>  <span>let</span> <span>time</span> <span>=</span> <span>TimeStack</span>.<span>addText</span>(<span>memoTime</span>)\n</span></span><span><span>\n</span></span><span><span>  <span>time</span>.<span>textColor</span> <span>=</span> <span>new</span> <span>Color</span>(<span>\"#ffffff\"</span>)\n</span></span><span><span>  <span>time</span>.<span>textOpacity</span> <span>=</span> <span>0.7</span>\n</span></span><span><span>  <span>time</span>.<span>font</span> <span>=</span> <span>Font</span>.<span>lightSystemFont</span>(<span>14</span>);\n</span></span><span><span>  <span>time</span>.<span>font</span> <span>=</span> <span>Font</span>.<span>italicSystemFont</span>(<span>14</span>);\n</span></span><span><span>\n</span></span><span><span>  <span>column1</span>.<span>addSpacer</span>()\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>TAG_REG</span> <span>=</span> <span>/#([^#\\s!.,;:?\"'()]+)(?= )/g</span>, \n</span></span><span><span>    <span>IMG_REG</span> <span>=</span> <span>/\\!\\[(.*?)\\]\\((.*?)\\)/g</span>,\n</span></span><span><span>    <span>LINK_REG</span> <span>=</span> <span>/(?&lt;!!)\\[(.*?)\\]\\((.*?)\\)/g</span>,\n</span></span><span><span>    <span>MD_LINK_REG</span> <span>=</span> <span>/\\[([^\\]]+)\\]\\(([^)]+)\\)/g</span>,\n</span></span><span><span>    <span>LINE_REG</span> <span>=</span> <span>/\\n/g</span>;\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>openUrl</span> <span>=</span> <span>memosUrl</span><span>+</span><span>'/m/'</span><span>+</span>(<span>memosData</span>[<span>0</span>].<span>uid</span> <span>||</span> <span>memosData</span>[<span>0</span>].<span>name</span> <span>||</span> <span>memosData</span>[<span>0</span>].<span>id</span>)\n</span></span><span><span>  <span>let</span> <span>addContent</span> <span>=</span> <span>memosData</span>[<span>0</span>].<span>content</span>\n</span></span><span><span>    .<span>replace</span>(<span>TAG_REG</span>, <span>\"\"</span>)\n</span></span><span><span>    .<span>replace</span>(<span>IMG_REG</span>, <span>\"\"</span>)\n</span></span><span><span>    .<span>replace</span>(<span>MD_LINK_REG</span>, <span>\"$1\"</span>);\n</span></span><span><span>\n</span></span><span><span>  <span>if</span>(<span>addContent</span>.<span>length</span> <span>&gt;</span> <span>100</span>){\n</span></span><span><span>    <span>addContent</span> <span>=</span> <span>addContent</span>.<span>slice</span>(<span>0</span>,<span>100</span>)<span>+</span><span>\"...\"</span>\n</span></span><span><span>  }\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>ContentStack</span> <span>=</span> <span>column1</span>.<span>addStack</span>()\n</span></span><span><span>  <span>ContentStack</span>.<span>centerAlignContent</span>()\n</span></span><span><span>  <span>ContentStack</span>.<span>url</span> <span>=</span> <span>openUrl</span>\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>content</span> <span>=</span> <span>ContentStack</span>.<span>addText</span>(<span>addContent</span>);\n</span></span><span><span>  <span>content</span>.<span>font</span> <span>=</span> <span>Font</span>.<span>lightSystemFont</span>(<span>18</span>)\n</span></span><span><span>  <span>content</span>.<span>textColor</span> <span>=</span> <span>new</span> <span>Color</span>(<span>\"#ffffff\"</span>)\n</span></span><span><span>  <span>content</span>.<span>leftAlignText</span>()\n</span></span><span><span>  <span>//content.textOpacity = 0.88\n</span></span></span><span><span><span></span>  <span>content</span>.<span>minimumScaleFactor</span> <span>=</span> <span>0.8</span>\n</span></span><span><span>\n</span></span><span><span>  <span>column1</span>.<span>addSpacer</span>()\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>TagsStack</span> <span>=</span> <span>column1</span>.<span>addStack</span>()\n</span></span><span><span>  <span>TagsStack</span>.<span>bottomAlignContent</span>()\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>tagArr</span> <span>=</span> <span>memosData</span>[<span>0</span>].<span>content</span>.<span>match</span>(<span>TAG_REG</span>);\n</span></span><span><span>  <span>let</span> <span>memosTag</span> <span>=</span> <span>''</span>;\n</span></span><span><span>  <span>if</span> (<span>tagArr</span>) {\n</span></span><span><span>      <span>memosTag</span> <span>=</span> <span>tagArr</span>.<span>map</span>(<span>t</span>=&gt;{\n</span></span><span><span>        <span>return</span> <span>`</span><span>${</span>String(<span>t</span>)<span>}</span><span>`</span>;\n</span></span><span><span>      }).<span>join</span>(<span>''</span>);\n</span></span><span><span>  }<span>else</span>{\n</span></span><span><span>      <span>memosTag</span> <span>=</span> <span>`#动态`</span>;\n</span></span><span><span>  }\n</span></span><span><span>\n</span></span><span><span>  <span>let</span> <span>memostag</span> <span>=</span> <span>TagsStack</span>.<span>addText</span>(<span>memosTag</span>)\n</span></span><span><span>  <span>memostag</span>.<span>textColor</span> <span>=</span> <span>new</span> <span>Color</span>(<span>\"#ffffff\"</span>)\n</span></span><span><span>  <span>memostag</span>.<span>textOpacity</span> <span>=</span> <span>0.7</span>\n</span></span><span><span>  <span>memostag</span>.<span>font</span> <span>=</span> <span>Font</span>.<span>lightSystemFont</span>(<span>14</span>);\n</span></span><span><span>  <span>memostag</span>.<span>lineLimit</span> <span>=</span> <span>1</span>\n</span></span><span><span>\n</span></span><span><span>  <span>return</span> <span>widget</span>\n</span></span><span><span>}\n</span></span><span><span>\n</span></span><span><span><span>async</span> <span>function</span> <span>getData</span>(<span>source</span>) {\n</span></span><span><span>  <span>var</span> <span>memosData</span>\n</span></span><span><span>  <span>let</span> <span>memosLength</span> <span>=</span> <span>`</span><span>${</span><span>memosUrl</span><span>}</span><span>/api/v1/memo/stats?creatorId=</span><span>${</span><span>memosUserID</span><span>}</span><span>`</span>\n</span></span><span><span>  <span>let</span> <span>memosDataLength</span> <span>=</span> <span>await</span> <span>new</span> <span>Request</span>(<span>memosLength</span>).<span>loadJSON</span>()\n</span></span><span><span>  <span>let</span> <span>randomNum</span> <span>=</span> Math.<span>floor</span>(Math.<span>random</span>() <span>*</span> (<span>memosDataLength</span>.<span>length</span> <span>-</span> <span>1</span> ) )\n</span></span><span><span>  <span>let</span> <span>memosapi</span> <span>=</span> <span>`</span><span>${</span><span>memosUrl</span><span>}</span><span>/api/v1/memo?creatorId=</span><span>${</span><span>memosUserID</span><span>}</span><span>&amp;limit=1&amp;offset=</span><span>${</span><span>randomNum</span><span>}</span><span>`</span>\n</span></span><span><span>  <span>try</span> {\n</span></span><span><span>      <span>memosData</span> <span>=</span> <span>await</span> <span>new</span> <span>Request</span>(<span>memosapi</span>).<span>loadJSON</span>()\n</span></span><span><span>  } <span>catch</span> (<span>error</span>) {\n</span></span><span><span>      <span>console</span>.<span>error</span>(<span>error</span>);\n</span></span><span><span>  }\n</span></span><span><span>  <span>return</span> <span>memosData</span>\n</span></span><span><span>}\n</span></span><span><span>\n</span></span><span><span>\n</span></span><span><span><span>async</span> <span>function</span> <span>shadowImage</span> (<span>img</span>) {\n</span></span><span><span>  <span>let</span> <span>ctx</span> <span>=</span> <span>new</span> <span>DrawContext</span>()\n</span></span><span><span>  <span>ctx</span>.<span>size</span> <span>=</span> <span>img</span>.<span>size</span>\n</span></span><span><span>  <span>ctx</span>.<span>drawImageInRect</span>(<span>img</span>, <span>new</span> <span>Rect</span>(<span>0</span>, <span>0</span>, <span>img</span>.<span>size</span>[<span>'width'</span>], <span>img</span>.<span>size</span>[<span>'height'</span>]))\n</span></span><span><span>  <span>ctx</span>.<span>setFillColor</span>(<span>new</span> <span>Color</span>(<span>'#212A37'</span>, <span>0.8</span>))\n</span></span><span><span>  <span>ctx</span>.<span>fillRect</span>(<span>new</span> <span>Rect</span>(<span>0</span>, <span>0</span>, <span>img</span>.<span>size</span>[<span>'width'</span>], <span>img</span>.<span>size</span>[<span>'height'</span>]))\n</span></span><span><span>  <span>return</span> <span>await</span> <span>ctx</span>.<span>getImage</span>()\n</span></span><span><span>}\n</span></span></code></pre></div>\n<h3>教程推荐</h3>\n<ul>\n<li><a href=\"https://docs.scriptable.app/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Scriptable Docs 官方手册</a></li>\n<li><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5NTIwMDQxOA%3D%3D&amp;action=getalbum&amp;album_id=1546917207903928321&amp;scene=173&amp;subscene=&amp;sessionid=svr_252e8048102&amp;enterid=1732717471&amp;from_msgid=2247484425&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Scriptable 神器实战</a></li>\n<li><a href=\"https://github.com/Nicolasking007/Scriptable\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Nicolasking007/Scriptable 仓库</a></li>\n</ul>\n", "categories": ["%E6%8A%98%E8%85%BE"], "time": 1732516926}, {"title": "广场周刊（回顾篇）：那么平常", "author": "林木木的博客", "pubDate": "2024-11-23 06:01:06", "link": "https://immmmm.com/weekly-review-2024/", "description": "\n<blockquote>\n<p>突然，起意。</p>\n<p>细看完23年8月起更新的广场周刊及只发了一期即断更至今的月刊，并整理出这么一篇周刊汇编。</p>\n<p>个人感受，如同若干个自己在多重宇宙中经历着、感叹着这平常的一切。</p>\n</blockquote>\n<h3>题图</h3>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/03/wk19-miss-1.jpg\" alt=\"wk19-miss-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/03/wk19-miss-2.jpg\" alt=\"wk19-miss-2\"></p>\n<p>24年3月（via <a href=\"https://memos.eallion.com/m/6238\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@大大的小蜗牛</a>）</p>\n<h3>走过</h3>\n<h4>1.小城自贡</h4>\n<p>23年8月｜酒足饭饱，这小镇生活的惬意莫过于此。小城自贡，有一块这样的长板就够了。行车路上我在想：人也一样，不需要做到面面俱到样样齐全，在一两个领域足够精进才是我等普通人的成才之路。</p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/08/0f95bbf2ce631b8cbd4a7c7e018fc14b.jpg\"><figcaption>By <a href=\"https://www.macin.org/2023/08/08/zi-gong/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Shirley Lee https://www.macin.org/</a></figcaption></figure><h4>2.包头市东达山艺术区</h4>\n<p>23年8月｜整个艺术区域打造得非常用心，应该是持续建设了很多年。里面很安静，处处体现着巧思，非常适合文艺范的小青年来探索一番。</p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/08/wk3-12.jpg\"><figcaption>By <a href=\"https://fxpai.com/baotoushidongdashanyishuquxiaotan/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">老派 https://fxpai.com/</a></figcaption></figure><h4>3.西藏游</h4>\n<p>23年8月｜请了五天假，跟了一个携程自营的团去西藏玩了七天六晚~</p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/08/wk4-xzy-4.jpg\" width=\"50%\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/08/wk4-xzy-5.jpg\" width=\"50%\"><figcaption>By <a href=\"https://zblogs.top/tibet-tour-day-1-2/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Justin https://zblogs.top/</a></figcaption></figure><h4>4.巴东三峡巫峡长</h4>\n<p>23年9月｜因为工作性质原因，经常到三峡出差。回国后，已两度前往秭归 - 巴东地区，也记录下了一些美景，特分享。</p>\n<p>（By <a href=\"https://blog.cuger.cn/p/c461/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Dorad https://blog.cuger.cn/</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/09/wk5-bdsx-00001.jpg\" alt=\"wk5-bdsx-00001\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/09/wk5-bdsx-00002.jpg\" alt=\"wk5-bdsx-00002\"></p>\n<h4>5.武功山</h4>\n<p>23年9月｜去武功山确实还得看老天，天气好，遇见的风景就更好，人也会心旷神怡，即使爬了几个小时的山，筋疲力尽，看到美景也会感觉这一路值了！ （via @Bruce）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/09/wk6-wgs-1.jpg\" alt=\"wk6-wgs-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/09/wk6-wgs-2.jpg\" alt=\"wk6-wgs-2\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/09/wk6-wgs-3.jpg\" alt=\"wk6-wgs-3\"></p>\n<h4>6.石家庄动漫展</h4>\n<p>23年10月｜真羡慕这些年轻人，在这样的盛大节日里，穿成自己心目中热爱的形象，自信地穿梭在人群之中，这大概就是二次元的狂欢吧？ （By <a href=\"https://dongjunke.cn/posts/2023/10/02/30489.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">小饿 https://dongjunke.cn/</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk8-dmzjy-1.jpg\" alt=\"wk8-dmzjy-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk8-dmzjy-2.jpg\" alt=\"wk8-dmzjy-2\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk8-dmzjy-3.jpg\" alt=\"wk8-dmzjy-3\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk8-dmzjy-4.jpg\" alt=\"wk8-dmzjy-4\"></p>\n<h4>7.小镇的世外桃源</h4>\n<p>23年10月｜驱车30分钟来到郊外的一家民宿秋游，看到了这个只有远离城市喧嚣才存在的世外桃源。 （via <a href=\"https://veryjack.com/photograph/utopia/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">阿杰 JACK</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk9-swty-1.webp\" alt=\"wk9-swty-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk9-swty-2.webp\" alt=\"wk9-swty-2\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk9-swty-3.webp\" alt=\"wk9-swty-3\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/10/wk9-swty-4.webp\" alt=\"wk9-swty-4\"></p>\n<h4>8.吉安武功山</h4>\n<p>23年10月｜来看一段日出延时视频~ （via <a href=\"https://www.yanghuaxing.com/blog/1861.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@小杨</a>）</p>\n<div class=\"video-wrapper\">\n    <video controls controlslist=\"nodownload\" src=\"https://r2.immmmm.com/2023/10/wgs.mp4\" preload=\"none\"><p>\n            Your browser doesn't support HTML5 video. Here is a\n            <a href=\"https://r2.immmmm.com/2023/10/wgs.mp4\">link to the video</a> instead.\n        </p>\n    </video>\n</div>\n<h4>9.马岭美女峰野攀</h4>\n<p>23年11月｜总路线有个 10 公里，野攀段不短，要翻几个山头，上上下下多次，大量路线需要手脚并用，乃至屁降（爬山时没少干这种事，但第一次知道这个词）。也经过了几处两侧均是悬崖的山脊，非常刺激。 （via <a href=\"https://www.skyue.com/23103021.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@拾月</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk11-mvfyp-1.jpg\" alt=\"wk11-mvfyp-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk11-mvfyp-2.png.jpg\" alt=\"wk11-mvfyp-2\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk11-mvfyp-3.png.jpg\" alt=\"wk11-mvfyp-3\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk11-mvfyp-4.jpg\" alt=\"wk11-mvfyp-4\"></p>\n<h4>10.夜景模式下的广州</h4>\n<p>23年11月｜（via <a href=\"https://t.memos.ee/m/343\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@老孙</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk13-yjgz-1.jpg\" alt=\"wk13-yjgz-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk13-yjgz-2.jpg\" alt=\"wk13-yjgz-2\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk13-yjgz-3.jpg\" alt=\"wk13-yjgz-3\"></p>\n<h4>11.新疆之行</h4>\n<p>23年12月｜日程满满，感悟颇多，尤其是新疆建设兵团之行，回想起来，还是泪眼婆娑，老兵精神，巍然屹立。 （via <a href=\"https://www.xiangshitan.com/post/733.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@响石潭</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/12/wk14-xjzx-1.jpg\" alt=\"wk14-xjzx-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/12/wk14-xjzx-2.jpg\" alt=\"wk14-xjzx-2\"></p>\n<h4>12.东极岛</h4>\n<p>23年12月｜东极岛是东极镇的一个叫法，因为韩寒的电影《后会无期》而著名，其实东极岛并不是一个岛，而是东极镇下辖的所有岛屿的统称。（By <a href=\"https://www.macin.org/2023/12/12/dong-ji-dao/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">筷子小手</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/12/wk15-djd-1.jpg\" alt=\"wk15-djd-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/12/wk15-djd-2.jpg\" alt=\"wk15-djd-2\"></p>\n<h4>13.古都大同</h4>\n<p>24年1月｜2023年最后一站，选择了大同。这个城市对我来说略微有些陌生，因为对于北魏的历史我知之甚少；但大同作为北魏都城，我们旅游偏爱古城。 （via <a href=\"https://demochen.com/posts/20240101/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">DemoChen</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/01/wk16-xksdt.jpg\" alt=\"wk16-xksdt\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/01/wk16-xksdt-2.jpg\" alt=\"wk16-xksdt-2\"></p>\n<h4>14.重庆华岩寺随拍</h4>\n<p>24年1月｜越来越多的年轻人在上进与上班之间选择了上香。（By <a href=\"https://www.shephe.com/2024/01/%E5%8D%8E%E5%B2%A9%E5%AF%BA%E9%9A%8F%E6%8B%8D/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@牧羊人</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/01/wk17-xghys-2.jpg.webp\" alt=\"wk17-xghys-2.jpg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/01/wk17-xghys-3.jpg.webp\" alt=\"wk17-xghys-3.jpg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/01/wk17-xghys-1.jpg.webp\" alt=\"wk17-xghys-1.jpg\"></p>\n<h4>15.自驾出游三千里</h4>\n<p>24年2月｜春节自驾出游湖南、广西和广东三省5市，一共跑了3000多公里。手机和相机轮番上阵，拍了不少照片，选一些作为记录。 （By <a href=\"https://yayu.net/4018.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">雅余</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/02/wk18-yyzjcy-1.jpg\" alt=\"wk18-yyzjcy-1\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/02/wk18-yyzjcy-2.jpg\" alt=\"wk18-yyzjcy-2\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/02/wk18-yyzjcy-3.jpg\" alt=\"wk18-yyzjcy-3\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/02/wk18-yyzjcy-4.jpg\" alt=\"wk18-yyzjcy-4\"></p>\n<h4>16.去香港办了张银行卡</h4>\n<p>24年3月｜（By <a href=\"https://www.domon.cn/yi-ge-duo-yue-qian-de-chun-tian/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">DOMON</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/03/wk19-xgblzk-2.jpg.webp\" alt=\"wk19-xgblzk-2.jpg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/03/wk19-xgblzk-3.jpg.webp\" alt=\"wk19-xgblzk-3.jpg\"></p>\n<h4>17.武汉东湖樱花园</h4>\n<p>24年4月｜樱花盛开，踩着小单车过去闲逛了一圈~ （By <a href=\"https://blog.cuger.cn/p/5d21/#%E4%BA%94%E9%87%8D%E5%A1%94\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Dorad</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk20-whyhy-4.jpg.webp\" alt=\"wk20-whyhy-4.jpg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk20-whyhy-1.jpg.webp\" alt=\"wk20-whyhy-1.jpg\"></p>\n<h4>18.无锡太湖</h4>\n<p>24年4月｜清明三天假期，携家人去无锡太湖附近游览观光。入住太湖饭店，景色很美。晚上去南长街逛夜市，虽然各地的古街都很雷同，但是南长街如今的水乡风韵还是让我们流连忘返。 （By <a href=\"https://fxpai.com/wuxitaihuqingmingyou/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">非学派</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk21-wxthncj-2.jpg.webp\" alt=\"wk21-wxthncj-2.jpg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk21-wxthncj-3.jpg.webp\" alt=\"wk21-wxthncj-3.jpg\"></p>\n<h4>19.西昌游</h4>\n<p>24年4月｜到西昌后，去了常见的景点：泸山、金鳞银鳞沙滩、邛海边的湿地公园、唐园。邛海边人多，堵车寸步难行。 （By <a href=\"https://izhizu.com/travels/869.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">知足</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk21-xichang-2.jpg.webp\" alt=\"wk21-xichang-2.jpg\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk21-xichang-1.jpg.webp\" alt=\"wk21-xichang-1.jpg\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk21-xichang-3.jpg.webp\" alt=\"wk21-xichang-3.jpg\"></p>\n<h3>20.乐山大佛</h3>\n<p>24年5月｜匆匆略过东方佛都的部分景点，我们换票进入了乐山大佛景区，这边人明显比东方佛度多了许多……不过我个人觉得体验感远不及东方佛都。我们走过一处碑林、一处斋院，就来到了下佛脚排队出。（By <a href=\"https://www.shephe.com/life/%E4%B9%90%E5%B1%B1%E5%92%8C%E6%88%90%E9%83%BD/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">KEVIN</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/05/wk22-lesdf-1.jpg.webp\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/05/wk22-lesdf-2.jpg.webp\" alt=\"\"></p>\n<h4>21.悬空寺</h4>\n<p>24年7月｜远眺悬空寺，它宛如悬挂在陡峭悬崖上的明珠，给人以强烈的视觉冲击。寺前的浑河水流湍急，峡谷中呼啸的冷风更增添了几分神秘感。这种自然与人文的完美结合，让人不禁感叹古人的智慧。（By <a href=\"https://sizheng.org/travel/xuan-kong-si/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@小雪</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/07/mk1-sxxks-2.avif\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/07/mk1-sxxks-4.avif\" alt=\"\"><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/07/mk1-sxxks-5.avif\" alt=\"\"></p>\n<h3>记过</h3>\n<h4>1.中医</h4>\n<p>23年8月｜至少要先知道中医是什么，中医是经验统计。很多人的很多相同症状吃了某几味药，好了——妳现在有了这些症状，也试着吃这几味药。在一个人身上有效的药方（两千年前就写好的），指望着复制到别人身上也同样有效？（By <a href=\"https://kaix.in/2023/0812-chinese-medicine/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">dimlau https://kaix.in/</a>）</p>\n<h4>2.三十而立</h4>\n<p>23年8月｜今晚和大学兄弟们搓了一顿，庆祝我考过了驾照，10年了，人生匆匆，三十而立。 （via <a href=\"https://m.cooolr.cn/m/220\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@cooolr</a>）</p>\n<h4>3.人生无常</h4>\n<p>23年8月｜昨天晚上有个同事为了跟老板一起去踢球然后引发心肌梗塞，人当场就没了。人生就是无常，谁也不知道好好一个人啥时候就没了。 （via <a href=\"https://memos.ee/m/94\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@老孙</a>）</p>\n<h4>4.几句，影响一生</h4>\n<p>23年8月｜有些人在某些时候闲聊几句话，或者写几句文字，可能就影响了另一个人的一生。即便后者在多年以后已经无法想起心中那份感受从何而来。比如，阿城之于我。</p>\n<blockquote>\n<p>人生在有生之年，不妨多东张西望，拼命干，其实浪费生命。商业竞争常常是盲目的，我们不妨有胆量闲一闲。—— 阿城《拖腔》</p>\n</blockquote>\n<p>（via <a href=\"https://memos.elizen.me/m/1209\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Elizen</a>）</p>\n<h4>5.幸福</h4>\n<p>23年9月｜昨天晚上带闺女来县城，老婆开车我和闺女坐后排。闺女说困了便头枕着我的腿、抱着我的胳膊憨憨入睡。此时我的也是幸福感满满！ （via <a href=\"https://memos.laozhang.org/m/127\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@老张</a>）</p>\n<h4>6.小小理发店</h4>\n<p>23年10月｜一对老夫老妻和一个年轻小伙共同经营的小小理发店💈，每次进店理发仿佛都能将我从这异常吵嚷的生活中解放出来，得以短暂喘息。还记得上回理发结束后，老板吆喝了一声让我再坐下，我很讶异，不太明白要做什么。直到他说：“没剪好，再修一下。” （via <a href=\"https://memos.kouseki.cn/m/81\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Kouseki</a>）</p>\n<h4>7.技术笑话</h4>\n<p>23年11月｜我崇拜真正的技术，比如把火箭送上天，再收回来。但有些被称为“技术”的技术根本不是技术，比如摇一摇打开淘宝。而后者，这些技术就是个笑话。 （via <a href=\"https://api.eallion.com/memos/m/6010\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@大大的小蜗牛</a>）</p>\n<h4>8.无法停止</h4>\n<p>23年11月｜一个习惯、一个行为我们明明知道是有害的，为什么还是无法停止？比如过度抽烟、长期熬夜、强迫性刷手机，即使已经无法从中获得快乐，我们仍然无法停止。 （via <a href=\"https://lillianwho.com/posts/%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E8%87%AA%E6%88%91%E4%BC%A4%E5%AE%B3%E7%9A%84%E8%A1%8C%E4%B8%BA/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@莉莉蒙</a>）</p>\n<h4>9.家庭战争</h4>\n<p>24年1月｜“一个家庭最可怕的不是穷，而是有一个经常制造内耗的，不停的制造矛盾和争吵，生活在这样的家庭里，每个人的神经都紧绷，生怕犯点小错误就会引发家庭战争。” （via <a href=\"https://memos.1900.live/m/791\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@1900</a>）</p>\n<h4>10.咖啡觉</h4>\n<p>24年1月｜老早以前就看过「咖啡觉」的概念: 喝完咖啡以后小憩一会儿。但是一直没有实践过, 今日一试, 效果果然不同凡响, 比睡醒后喝咖啡精神好多了。（via <a href=\"https://memos.roccoshi.top/m/298\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@moreality</a>）</p>\n<h4>11.幸福的三大要素</h4>\n<blockquote>\n<p>幸福的三大要素是：有要做的事（something to do）、有要爱的人（someone to love）、有寄予希望的东西（something to hope for）。– 亚历山大·查默斯，19世纪美国著名医生</p>\n</blockquote>\n<p>24年3月｜意译一下：手里有活，心里有爱，眼里有光。 （via <a href=\"https://me.edui.fun/m/2114\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@林木木</a>）</p>\n<h4>12.造火箭</h4>\n<p>24年4月｜面试造火箭 上班拧螺丝（via <a href=\"https://memos.qiangtu.com/m/CCoYDR36EW8obBqLhP9pHC\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@odin</a>）</p>\n<h4>13.时间加速</h4>\n<p>24年4月｜有人说，时间的流速不会变化，然而，我们能感知到的时间流速，却有明显的加速趋势。这是因为生活给我们带来的「新鲜感」在不断下降。（via <a href=\"https://i.hux.ink:5233/m/292\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@落落vici</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2024/04/wk21-time-up.webp\" alt=\"wk21-time-up\"></p>\n<h4>14.人啊</h4>\n<p>24年5月｜非常喜欢这句话：“人啊，长了颗红楼梦的心，却生活在水浒的世界，想交些三国里的桃园弟兄，却总遇到些西游记里的妖魔鬼怪”。（via <a href=\"https://me.suus.me/m/hKMZ2VzV3rexqumAviaCyV\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@SeerSu</a>）</p>\n<h4>15.放下</h4>\n<p>24年5月｜突然感受到一种莫名的悸动，我们都逃不过生死、躲不过离别，摆脱不了命运的安排，可是人生不是游戏，我们无法提前预知剧本，也没有什么攻略，能让我们逃过一些挫折，所有的一切都需要自己来体验、通关，或者是——放下。 （via <a href=\"https://blog.awumiao.org/1060/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">《夏雨簌簌》</a>）</p>\n<h4>16.红伞伞白杆杆</h4>\n<p>红伞伞，白杆杆，吃完一起躺板板。躺板板睡棺棺，然后一起埋山山。埋山山哭喊喊，全村都来吃饭饭，吃饭饭有伞伞，全村一起躺板板。躺板板没人埋，然后一起晒干干。晒干干，冒烟烟，然后一起升仙仙，做仙仙下凡凡，下凡凡后捡伞伞。（via <a href=\"https://b.lms.pub/m/218\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@不亦乐乎</a>）</p>\n<h3>看过</h3>\n<h4>1.《超越百岁》</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/book/36696538.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://book.douban.com/subject/36696538/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">超越百岁</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">8.8</span>\n</div>\n                <div class=\"db-card-abstract\">彼得 · 阿提亚（Peter Attia） 比尔 · 吉福德（Bill Gifford） / 2024 / 中译出版社</div>\n            </div>\n            <div class=\"db-card-cate\">book</div>\n        </div>\n    </div>\n\n\n\n<p>提到健康寿命及其衰退的三个方面：认知能力下降、身体机能下降、与年龄无关的情绪健康。个人理解：以开放的心态，活到老学到老，在整体不可避免的认知下降中做到点的相对上升就是赚到；运动大于药物，预防大于治疗，合理判断“尽早控制”与“过度治疗”的不同；多看，看自然，看世界…感受万物之美，珍惜能体验其中之珍贵。</p>\n<h4>2.《置身事内》</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/book/35546622.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://book.douban.com/subject/35546622/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">置身事内</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">9.1</span>\n</div>\n                <div class=\"db-card-abstract\">兰小欢 / 2021 / 上海人民出版社</div>\n            </div>\n            <div class=\"db-card-cate\">book</div>\n        </div>\n    </div>\n\n\n\n<p>不断利好的房产政策我们该买房吗？面对不断利好购房的政策，我们到底是该顺应国家大方向政策积极买房呢？还是觉得房价没到底，坚决不买呢？下面结合自己作为一个异地购房人、北京看过房的人以及在这个周期内亲历的人的视角来说说自己的看法。 （By <a href=\"https://blog.sailfishc.com/house-V2\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@橙子</a>）</p>\n<h4>3.《锵锵行天下》第一季</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/30325398.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/30325398/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">锵锵行天下 第一季</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">9.1</span>\n</div>\n                <div class=\"db-card-abstract\">2018 / 中国大陆 / 脱口秀 / 温姬彦 苏雷 李丹彪 / 窦文涛 许子东</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<p>到底什么叫“文明”？如果说以科技作为文明的标准，自然是那些节奏快的地方更现代化，可如果以舒适度，幸福自恰作为衡量标准，那么这些生活节奏慢一点的地方更加文明现代化。</p>\n<h4>4.《圆桌派》第七季</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/36099888.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/36099888/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">圆桌派 第七季</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">9.3</span>\n</div>\n                <div class=\"db-card-abstract\">2024 / 中国大陆 / 脱口秀 / 窦文涛 许子东</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<h4>5.《十三邀 第七季》</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/36253896.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/36253896/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">十三邀 第七季</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">9.4</span>\n</div>\n                <div class=\"db-card-abstract\">2023 / 中国大陆 / 脱口秀 / 许知远 蔡皋</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<p>对话韩红、对话李景亮，出乎意料的收获，完全是另外一个人生，另一个世界！</p>\n<h4>6.《奥本海默》</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/35593344.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/35593344/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">奥本海默</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">8.8</span>\n</div>\n                <div class=\"db-card-abstract\">2023 / 美国 英国 / 剧情 传记 历史 / 克里斯托弗·诺兰 / 基里安·墨菲 艾米莉·布朗特</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<h4>7.《泰勒·斯威夫特：时代巡回演唱会 Taylor Swift: The Eras Tour》</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/36538847.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/36538847/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">泰勒·斯威夫特：时代巡回演唱会</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">9.3</span>\n</div>\n                <div class=\"db-card-abstract\">2023 / 美国 / 纪录片 音乐 歌舞 真人秀 / 萨姆·伦奇 / 泰勒·斯威夫特 阿曼达·巴伦</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<h4>8.《繁花》（沪语版）</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/34874646.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/34874646/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">繁花</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">8.7</span>\n</div>\n                <div class=\"db-card-abstract\">2023 / 中国大陆 / 剧情 爱情 / 王家卫 / 胡歌 马伊琍</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<h4>9.《周处除三害》</h4>\n\n\n\n\n\n    \n\n\n\n\n    \n    <div class=\"db-card\">\n        <div class=\"db-card-subject\">\n            <div class=\"db-card-post\"><img loading=\"lazy\" decoding=\"async\" referrerpolicy=\"no-referrer\" src=\"https://db.immmmm.com/movie/36151692.jpg\"></div>\n            <div class=\"db-card-content\">\n                <div class=\"db-card-title\"><a href=\"https://movie.douban.com/subject/36151692/\" class=\"cute\" target=\"_blank\" rel=\"noreferrer\">周处除三害</a></div>\n                <div class=\"rating\">\n<span class=\"allstardark\"><span class=\"allstarlight\"></span></span><span class=\"rating_nums\">8.1</span>\n</div>\n                <div class=\"db-card-abstract\">2023 / 中国台湾 / 动作 犯罪 / 黄精甫 / 阮经天 袁富华</div>\n            </div>\n            <div class=\"db-card-cate\">movie</div>\n        </div>\n    </div>\n\n\n\n<h4>10.《我只能走十步》</h4>\n<p>发现很多被作为“毕业设计”的动画短片都内涵丰富，画面唯美.每个人的十步都足以让他到达他心中的光，无论是否生来与悬崖近否，你能看到自己光，但走向它需要你的人生，和勇气，只有十步，你愿意径直走向光吗？（via <a href=\"https://memos.ssean.top/m/155\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Sean</a>）</p>\n<div class=\"aspect-ratio\">\n  \n</div>\n\n<h4>11.瓦依那 X 任素汐 《大梦》</h4>\n<p>如果生命只是大梦一场，你会怎么办？</p>\n<div class=\"aspect-ratio\">\n  \n</div>\n\n<h4>12.什么是咖啡</h4>\n<p>学会了，咖啡就是一盖饭。 （via <a href=\"https://memos-cp2p4kogtna2u28wuvfmmi4sugw5azue.eallion.com/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@大大的小蜗牛</a>）</p>\n<div class=\"aspect-ratio\">\n  \n</div>\n\n<h4>13.无人机航拍上海和平饭店周边</h4>\n<p>这个用 DJI Mavic 3 Pro 拍的上海和平饭店周边超级不错，灯亮起来那一刻好有震撼的感觉！正如拍摄者 Jin10Apr 所说，我们爱的不是繁花，而是那个遍地机会和金钱的时代。（via <a href=\"https://weekly.tw93.fun/posts/162-%E6%99%B4%E7%A9%BA%E5%A1%94%E7%BE%8E/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@潮流周刊</a>）</p>\n<div class=\"video-wrapper\">\n    <video controls controlslist=\"nodownload\" src=\"https://r2.immmmm.com/2024/01/wk17-wrjshhpfd.mp4\" preload=\"none\"><p>\n            Your browser doesn't support HTML5 video. Here is a\n            <a href=\"https://r2.immmmm.com/2024/01/wk17-wrjshhpfd.mp4\">link to the video</a> instead.\n        </p>\n    </video>\n</div>\n<h3>折腾过</h3>\n<h4>1.<a href=\"https://shenyandayi.com/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">深言达意</a>\n</h4>\n<p>清华发布AI向量词典\"深言达意\"，输入想表达的意思，匹配现代&amp;古代的近义词、反义词、联想词。再也不用胡诌 —— XXX说。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/08/IMAGE%202023-08-07%2015:05:05.jpg\" alt=\"IMAGE 2023-08-07 15:05:05\"></p>\n<h4>2.<a href=\"https://github.com/lovefc/china_school_badge\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">全国高校校徽字体图标库</a>\n</h4>\n<p>收集了全国200多所高校的校徽,制作成的字体图标库。</p>\n<h4>3.<a href=\"https://github.com/oldj/SwitchHosts\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">SwitchHosts</a>\n</h4>\n<p>“爱”上 GitHub，解决访问时图裂、加载慢的问题。下载 SwitchHosts 添加 <a href=\"https://raw.hellogithub.com/hosts\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">https://raw.hellogithub.com/hosts</a>，感谢 <a href=\"https://github.com/521xueweihan/GitHub520\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">GitHub520</a>。</p>\n<h4>4.<a href=\"https://github.com/wy580477/musicn-container\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Musicn 容器</a>\n</h4>\n<p>一个同时支持web和命令行的高品质音乐下载神器，还在找怎么快速下载歌曲的朋友推荐私有部署，目前支持咪咕、网易云、酷狗。（via <a href=\"https://qzone.boyhu.cn/m/1200\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@胡家小子</a>）</p>\n<h4>5.<a href=\"https://shields.io/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Shields.io</a>\n</h4>\n<p>一个简洁、一致、清晰的徽章。还支持 Docker 部署。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://img.shields.io/badge/%E5%B9%BF%E5%9C%BA%E5%91%A8%E5%88%8A-%E7%AC%AC%E5%9B%9B%E6%9C%9F-blue\" alt=\"\"></p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://img.shields.io/badge/%E5%B9%BF%E5%9C%BA%E5%91%A8%E5%88%8A%E7%AC%AC%E5%9B%9B%E6%9C%9F-8A2BE2\" alt=\"\"></p>\n<pre tabindex=\"0\"><code>![](https://img.shields.io/badge/广场周刊-第四期-blue)\n![](https://img.shields.io/badge/广场周刊第四期-8A2BE2)\n</code></pre>\n<h4>6.<a href=\"https://today.demochen.com/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">今天长这样</a>\n</h4>\n<p>分享天空的颜色，由 @DemoChen 维护。</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/09/wk5-tk.webp\" alt=\"wk5-tk\"></p>\n<h4>7.<a href=\"https://fatesinger.com/101971\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">WordPress 主题 Farallon</a>\n</h4>\n<p>来自 @大发 使用古法制作，不依赖三方框架。竟然还有 Hugo 版本。</p>\n<h4>8.<a href=\"https://vlieo.com/post/xin-fang-zhuang-xiu-fen-xiang/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">新房装修分享</a>\n</h4>\n<p>装修真是一个费钱，费心，不断妥协的过程，这一年下来，工作的收入基本全砸在了里面，额外还从爸妈那里花了不少钱。不过总算是结束了，用文字和图片的形式记录一下装修的亮点、心得与踩坑。</p>\n<h4>9.<a href=\"https://run.hux.ink/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">running page</a>\n</h4>\n<p>今晚没去跑步，折腾了一个跑步页面。 （via <a href=\"https://i.hux.ink:5233/m/81\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@落落vici</a>）</p>\n<p><img loading=\"lazy\" decoding=\"async\" src=\"https://r2.immmmm.com/2023/11/wk11-running-page.jpg\" alt=\"wk11-running-page\"></p>\n<h4>10.一句命令双开微信</h4>\n<p>原来 Mac 上可以用一句命令双开微信，以前找了各种法子都不怎么好用 （via <a href=\"https://memos.elizen.me/m/1335\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Elizen</a>）</p>\n<p><code>open -n /Applications/WeChat.app/Contents/MacOS/WeChat</code></p>\n<h4>11.<a href=\"https://github.com/spencerwooo/substats\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">substats</a>\n</h4>\n<p>一个无服务器 API，用于获取您最喜欢的服务中的关注者数量。如下效果：</p>\n<p><a href=\"https://immmmm.com/feed\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"><img loading=\"lazy\" decoding=\"async\" src=\"https://api-shields.edui.fun/badge/dynamic/json?url=https%3A%2F%2Fapi.swo.moe%2Fstats%2Ffeedly%2Fhttps%253A%252F%252Fimmmmm.com%252Ffeed&amp;query=count&amp;color=282c34&amp;label=Feedly&amp;labelColor=2bb24c&amp;logo=feedly&amp;logoColor=ffffff&amp;suffix=+subs&amp;cacheSeconds=3600\" alt=\"Feedly\"></a> <a href=\"https://immmmm.com/feed\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"><img loading=\"lazy\" decoding=\"async\" src=\"https://api-shields.edui.fun/badge/dynamic/json?url=https%3A%2F%2Fapi.swo.moe%2Fstats%2Finoreader%2Fhttps%253A%252F%252Fimmmmm.com%252Ffeed&amp;query=count&amp;color=282c34&amp;label=Inoreader&amp;labelColor=007bc7&amp;logo=data%3Aimage%2Fsvg+xml%3Bbase64%2CPHN2ZyB3aWR0aD0iNzIiIGhlaWdodD0iNzIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTM2IDBjMTkuODgyIDAgMzYgMTYuMTE4IDM2IDM2UzU1Ljg4MiA3MiAzNiA3MiAwIDU1Ljg4MiAwIDM2IDE2LjExOCAwIDM2IDB6bS03Ljk5IDMwLjk4QzIwLjgyNSAzMC45OCAxNSAzNi44MDQgMTUgNDMuOTkgMTUgNTEuMTc1IDIwLjgyNSA1NyAyOC4wMSA1N2M3LjE4MyAwIDEzLjAwOS01LjgyNSAxMy4wMDktMTMuMDExIDAtNy4xODUtNS44MjYtMTMuMDA5LTEzLjAwOS0xMy4wMDl6bTMuNjcgNS41NjVhMy43MjcgMy43MjcgMCAxMS0uMDA1IDcuNDU0IDMuNzI3IDMuNzI3IDAgMDEuMDA0LTcuNDU0em0tMy42Ny0xNC43NTh2NC42ODdjOS42NTYgMCAxNy41MTYgNy44NTggMTcuNTE2IDE3LjUxNWg0LjY4OWMwLTEyLjI0Mi05Ljk2MS0yMi4yMDItMjIuMjA1LTIyLjIwMnptMC05Ljc4N3Y0LjY4N2M3LjI5MiAwIDE0LjE0OCAyLjg0IDE5LjMwNiA3Ljk5OCA1LjE1OCA1LjE1NyA3Ljk5NSAxMi4wMTQgNy45OTUgMTkuMzA0SDYwYzAtOC41NDQtMy4zMjgtMTYuNTc3LTkuMzctMjIuNjJDNDQuNTg1IDE1LjMyNiAzNi41NTQgMTIgMjguMDEgMTJ6IiBmaWxsPSIjRkZGIiBmaWxsLXJ1bGU9Im5vbnplcm8iLz48L3N2Zz4%3D&amp;suffix=+subs&amp;cacheSeconds=3600\" alt=\"Inoreader\"></a> <a href=\"https://t.me/lmm214\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"><img loading=\"lazy\" decoding=\"async\" src=\"https://api-shields.edui.fun/badge/dynamic/json?url=https%3A%2F%2Fapi.swo.moe%2Fstats%2Ftelegram%2Flmm214&amp;query=count&amp;color=2CA5E0&amp;label=%E6%9E%97%E6%9C%A8%E6%9C%A8%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC&amp;labelColor=383838&amp;logo=telegram&amp;suffix=+%C2%B0C&amp;cacheSeconds=3600\" alt=\"Telegram\"></a> <a href=\"https://github.com/lmm214\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"><img loading=\"lazy\" decoding=\"async\" src=\"https://api-shields.edui.fun/badge/dynamic/json?url=https%3A%2F%2Fapi.swo.moe%2Fstats%2Fgithub%2Flmm214&amp;query=count&amp;color=181717&amp;label=GitHub&amp;labelColor=282c34&amp;logo=github&amp;suffix=+follows&amp;cacheSeconds=3600\" alt=\"GitHub\"></a></p>\n<h4>12.Vercel 境内加速 CNAME</h4>\n<p><code>vercel.cdn.yt-blog.top</code> 全国测速绿色！效果及教程也可直接打开该网址查看（via <a href=\"https://memos.xalaok.top/m/98\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Xalaok</a>）</p>\n<h4>13.<a href=\"https://github.com/Sitoi/dailycheckin\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">DailyCheckIn</a>\n</h4>\n<p>基于「Docker」/「青龙面板」/「群晖」/「本地」的每日签到脚本。</p>\n<h4>14.<a href=\"https://fatesinger.com/103313\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">使用 Cloudflare Worker 获取豆瓣书影音记录</a>\n</h4>\n<h4>15.<a href=\"https://fatesinger.com/103519\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">Hugo 简明教程</a>\n</h4>\n<h3>附：刊语</h3>\n<h4>第1期：我们记着什么（23年8月）</h4>\n<blockquote>\n<p>经常看你的广场，收获也挺多，想到一个点子，看值不值得：等你的广场内容越来越丰富，也许可以出一个“广场周刊”或月刊，应该不会太费事，你作为编辑，只需每隔一段时间在广场上挑几个你觉得比较合适的，形成一个周刊？———— By <a href=\"https://www.xrat.net/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@xRat</a></p>\n</blockquote>\n<h4>第2期：生活在别处（23年8月）</h4>\n<blockquote>\n<p>这个博客在我手里鼓捣了也有些年头了，能静下心来写东西的时候越来越少，但是想写的东西其实越来越多。一直没想到用什么方式，什么节奏去记录。重点是，我到底在记录什么。———— By <a href=\"https://elizen.me/posts/2023/08/living-elsewhere/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Elizen</a></p>\n</blockquote>\n<h4>第3期：整理周刊之后（23年8月）</h4>\n<blockquote>\n<p>时间在以超乎想象的速度从身边划走，转眼要到八月下旬，突然想到“我是谁？我在做什么？”总有一种忙不迭的感觉，似乎就是行军打仗，每一个环节都不能松懈，不能掉链子。———— By <a href=\"https://www.xiangshitan.com/post/712.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@响石潭</a></p>\n</blockquote>\n<h4>第4期：选择性注意（23年8月）</h4>\n<blockquote>\n<p>普通人过着普通的生活，大部分人的大部分时间，在两点一线中徘徊。给自己一些安静的时间，有时喝着清晨泡剩的凉茶，有时望着窗外一缕落日余晖。安静，复盘，思考。再添一杯水，再看一会光。 —— By <a href=\"https://www.thyuu.com/word/tale/77489\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@宇</a></p>\n</blockquote>\n<h4>第5期：脾气与身体（23年9月）</h4>\n<blockquote>\n<p>回顾这段时间，我发觉全心全意投入到一件事情上，不止真的让梦想实现（曾经大多数列出的梦想，都没有真的实现过），更有一种深深的满足感，那是我同时追求好几个指标（比如阅读、早起、写作）时所不曾获得的。 —— By <a href=\"https://lillianwho.com/posts/there-is-no-time-management/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">夜猫日记</a></p>\n</blockquote>\n<h4>第6期：自证预言（23年9月）</h4>\n<blockquote>\n<p>博客写的多的人，都不太在乎工具；而很多爱折腾网站的人，文章数量却很少，而且很多博文本身就是建站有关的内容：《从零开始配置一个xx静态博客》、《好看实用的xx主题插件分享》 —— By <a href=\"https://thirdshire.com/post/blogging-journey/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">第三夏尔</a></p>\n</blockquote>\n<h4>第7期：灾难（23年9月）</h4>\n<blockquote>\n<p>最初，没有人在意这场灾难，这不过是一场山火，一次旱灾，一个物种的灭绝，一座城市的消失，直到这场灾难和每个人息息相关。 —— via <a href=\"https://m.cooolr.cn/m/247\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@cooolr</a>自证预言（23年8月）</p>\n</blockquote>\n<h4>第8期：回家（23年10月）</h4>\n<blockquote>\n<p>我们一生好像只为了几件事：奋笔疾书的高考，短暂的春节返乡，挥手离别的不舍，满怀期待的节假日，一周疲惫上班后的双休以及每天下班前的倒计时。 —— via <a href=\"https://i.hux.ink:5233/m/28\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@404</a></p>\n</blockquote>\n<h4>第9期：生活与记录（23年10月）</h4>\n<blockquote>\n<p>照片和文字总有它自己的力量，一张照片里除了可爱的人，还有时间、空间、味道和情绪。这些东西，恰好组成了人生的全部意义。 —— By <a href=\"https://elizen.me/posts/2023/10/travel-202310/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@Elizen</a></p>\n</blockquote>\n<h4>第10期：避免思考（23年10月）</h4>\n<blockquote>\n<p>难得的周末和节假日，得去「网红」餐厅吃点好吃的，到「网红」街区玩玩放松下，不花点钱怎么对得起平日里操劳努力的自己呢？ —— By <a href=\"https://ourai.ws/posts/the-cause-of-suffering/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@欧雷</a></p>\n</blockquote>\n<h4>第11期：沉重时刻（23年11月）</h4>\n<blockquote>\n<p>妳的周刊，如果不是妳来编排，它就不再是妳的周刊。摆脱人工模式，才说明是不想办下去，这才是内容行业的衰落。 —— By <a href=\"https://kaix.in/2023/1103-ai/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@dimlau</a></p>\n</blockquote>\n<h4>第12期：吃土了啥？（23年11月）</h4>\n<blockquote>\n<p>今年的双十一还是基本什么都没买，一方面可能是因为确实没什么优惠，另一方面也是自己确确实实没有什么很需要的购物需求。 —— By <a href=\"https://scottyeung.top/2023/11-11-shopping-festival/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@YeungYeah</a></p>\n</blockquote>\n<h4>第13期：写个博客（23年11月）</h4>\n<blockquote>\n<p>对于没有经历过前移动互联网时代的人来说，一定有许多困惑，究竟是谁还在写博客？又是谁还在看博客？为什么这些博客作者不在意博客与自媒体之间悬殊的流量差异？ —— via <a href=\"https://www.xiaoyuzhoufm.com/episode/65545f5508c985ff0f02a96f\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@二维吾码</a></p>\n</blockquote>\n<h4>第14期：习惯……（23年12月）</h4>\n<blockquote>\n<p>前阵子刚回忆过小时候怕黑的事，现在想来人的成长大概不是不再害怕，而是习惯了面对。相比对黑暗的恐惧，我已经更习惯于一探究竟。 —— By <a href=\"https://kaix.in/2023/1129-dimensions/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@dimlau</a></p>\n</blockquote>\n<h4>第15期：记住遗忘（23年12月）</h4>\n<blockquote>\n<p>太多的事，我们都知道发生过，就在昨天，就在眼前。唯有用“记住”对抗“遗忘”，用“乐观”对抗“消极”，相信，光的力量！</p>\n</blockquote>\n<h4>第16期：只能向 Qian（24年1月）</h4>\n<blockquote>\n<p>聊这么多关于赚钱的内容，似乎有点太世俗、太功利，但一不偷二不抢，赚钱，谁也别瞧不起谁。 —— By <a href=\"https://yinji.org/5233.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">青山</a></p>\n</blockquote>\n<h4>第17期：回家过年（24年1月）</h4>\n<blockquote>\n<p>春运抢票已经开始了。虽然回家的途径有很多种，我与大多数人一样选择了火车，也就避免不了地参与了抢票。迟迟不见出票，内心十分焦急。（By <a href=\"https://feng.pub/0120246330.html\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@阿锋</a>）</p>\n</blockquote>\n<h4>第18期：是否如初（24年2月）</h4>\n<blockquote>\n<p>上个月底收到一封定期邮件，提醒我博客已经十七年了。在这十七年里，更新的频率越来越低，但它一直都是我生活的一部分。它记录了我的成长、经历与变化，也记录着老朋友们在评论区的欢乐。（By <a href=\"https://digu.plus/post/fe58474077dd435d9e5ccdfbdbf27c3b/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">嘀咕</a>）</p>\n</blockquote>\n<h4>第19期：春天到了（24年3月）</h4>\n<blockquote>\n<p>春天带来的生命力就是有如此的穿透力。</p>\n<p>我有理由去坚信，春天就是崭新的开始。</p>\n<p>我所要做的，无非是：</p>\n<p>给时间一点点时间，</p>\n<p>让过去过去，让开始开始。</p>\n<p>（By <a href=\"https://www.domon.cn/yi-ge-duo-yue-qian-de-chun-tian/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">DOMON</a>）</p>\n</blockquote>\n<h4>第20期：佛顶頂佛（24年4月）</h4>\n<blockquote>\n<p>接到奶奶病重的消息的时候，我姐开玩笑说让我晚两天回去，说她得晚两天才能回去，担心我回去奶奶就走了，一句中的，我回去当天奶奶就走了，当时我就在想奶奶在最后的时刻在想什么？ （By <a href=\"https://blog.sailfishc.com/nainai\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">橙子</a>）</p>\n</blockquote>\n<h4>第21期：不同世界（24年4月）</h4>\n<blockquote>\n<p>外出培训，沿路看到了上午“九点的世界”，熟悉得不能再熟悉的街道，但完全是不同的人群。印象最深一幕：一手拉着带轮子的买菜小车，一手拄着登山杖，是她缓慢前行，还是别人走得太快…</p>\n</blockquote>\n<h4>第22期：行万里路（24年5月）</h4>\n<blockquote>\n<p>再堵的五一，也挡不住成为“添堵”之一。连 City Walk 打卡本地早点蛋饼店，不幸遇到打包 10 个的游客。好消息就是，下周起终于回复正常！</p>\n</blockquote>\n<h4>第23期：难以放松（24年5月）</h4>\n<blockquote>\n<p>我的身体真是太弱鸡了，动不动就疲惫的要死，而且仅限眼部和脸部。脸部肌肉一直很紧张，必须刻意放松，甚至需要一直张开嘴。可能有一天我会猝死吧，脑溢血之类的。（By <a href=\"https://61.life/2024/0524\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">61’s life</a>）</p>\n</blockquote>\n<h4>第24期：你成熟了（24年6月）</h4>\n<blockquote>\n<p>我们都学会了怎么去扮演一个“好”的社会人，却忘记了如何扮演“自己”。意识到这种变化的时候其实有一点难过，并不是难过自己变了，而是难过这才是成长，是家人朋友口中的”你成熟多了“。 —— By <a href=\"https://www.pseudoyu.com/zh/2024/06/06/yearly_review_27/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">@pseudoyu</a></p>\n</blockquote>\n", "categories": ["%E5%91%A8%E5%88%8A"], "time": 1732312866}, {"title": "Ryujinx 模拟器上手记录", "author": "林木木的博客", "pubDate": "2024-11-10 05:38:32", "link": "https://immmmm.com/ryujinx-switch/", "description": "\n<p>十一假期看到消息 Ryujinx 删库，那会儿《智慧的再现》也刚发布，说是 M1 芯片就能流畅运行，咱着 M2 那不起飞，立刻尝个尾鲜。</p>\n<p>当然，支持正版，卡带已入。</p>\n<figure><img loading=\"lazy\" decoding=\"async\" src=\"https://r2m.immmmm.com/memos/2024/10/SCR-20241007-nkhd.jpeg.webp\"><figcaption>智慧的再现</figcaption></figure><p>实测效果，能玩，微微卡，偶尔崩溃（使用渲染缓存后大大改善）。</p>\n<h3>模拟器、Key、固件下载</h3>\n<p>Ryujinx 模拟器 <a href=\"https://ryujinx.cn.uptodown.com/mac/download\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">https://ryujinx.cn.uptodown.com/mac/download</a></p>\n<p>Ryujinx Prod Keys <a href=\"https://prodkeys.net/ryujinx-prod-keys-v2/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">https://prodkeys.net/ryujinx-prod-keys-v2/</a></p>\n<p>Ryujinx Firmware Switch 固件 <a href=\"https://prodkeys.net/ryujinx-firmware-v2/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">https://prodkeys.net/ryujinx-firmware-v2/</a></p>\n<h3>几点配置</h3>\n<p>详细教程见 <a href=\"https://github.com/hhstore/blog/issues/398\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">《MacOS 使用 Ryujinx 模拟器 + 手柄🎮 游玩 NS 游戏》</a>。</p>\n<h3>解锁全 amiibo</h3>\n<p>链接：<a href=\"https://pan.baidu.com/s/12ldEUYwPMm1rVa8XUUJBjw?pwd=6666\" target=\"_blank\" rel=\"noopener nofollow noreferrer\">https://pan.baidu.com/s/12ldEUYwPMm1rVa8XUUJBjw?pwd=6666</a></p>\n<p>文件很小2M秒下，放入模拟器中 <code>portable\\system\\amiibo</code></p>\n<h3>渲染缓存包</h3>\n<p>电报频道 @ryujinxmac，下载放入对应文件夹，第一次加载游戏会读取超大缓存，游戏中就流畅很多很多。</p>\n", "categories": ["%E6%97%A5%E5%B8%B8"], "time": 1731188312}, {"title": "如何优雅的截图", "author": "Redish101博客", "pubDate": "2024-09-22 01:30:19", "link": "https://blog.redish101.top/article/how-to-cap-screen", "description": "\n<link rel=\"preload\" as=\"image\" href=\"https://userbase.kde.org/images.userbase/thumb/4/48/Taking_Screenshots.png/500px-Taking_Screenshots.png\">\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/how-to-cap-screen\">https://blog.redish101.top/article/how-to-cap-screen</a>\n</blockquote>\n<div>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">以免有些人在会截图的情况下故意不截图而拍屏，用满是摩尔纹的屏幕恶心群友的眼睛，这里准备了几篇文章来帮助你学会如何截图。如果你被人扔了这篇文章的链接，感到冒犯，不好意思，冒犯的就是你</p></blockquote>\n<h2>如何在 Windows 11 下截图</h2>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">翻译自：<a href=\"https://www.microsoft.com/en-us/windows/learning-center/how-to-screenshot-windows-11\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">How to Take Screenshots on Windows 11 | Windows Learning Center</a></p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在Windows 11中捕获屏幕截图是一个简单且高效的过程。了解以下几种截图方法，可以帮助您快速保存重要信息至您的个人计算机。</p>\n<h3>使用Snipping Tool截图</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">Snipping Tool是Windows 11中截屏的一种便捷方式。如果您之前使用过Windows操作系统，那么您可能已经熟悉Snipping Tool。此版本的工具结合了原有的Snipping Tool与Snip &amp; Sketch Tool的功能。以下是开启Snipping Tool并开始截图的步骤：</p>\n<ul>\n<li>按下 <code>Windows徽标键 + Shift + S</code> 快捷键直接启动Snipping Tool。</li>\n<li>输入快捷键后，屏幕顶部会出现一个小工具栏。</li>\n<li>在工具栏中选择以下截图模式之一：\n<ul>\n<li>矩形截图</li>\n<li>自由绘制截图</li>\n<li>窗口截图</li>\n<li>全屏截图</li>\n</ul>\n</li>\n<li>选择矩形区域或自由绘制以突出显示活动窗口或全屏的指定区域。</li>\n<li>截图后，在屏幕右下角将出现截图的缩略图预览。</li>\n<li>Snipping Tool将截图直接复制到剪贴板，因此您可以根据需要将其粘贴（<code>Ctrl + V</code>）到其他应用程序中。</li>\n</ul>\n<h3>如何使用Snipping Tool编辑截图</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">利用Snipping Tool直观的界面个性化您的截图。只需打开屏幕下方的缩略图，并从多种可用工具中选择。可以使用高亮标记、裁剪、着色以及书写文本，并提供多种形状和字体。如果使用的是触摸屏设备，可以直接用手写笔或手指进行绘画。完成编辑后，您可以：</p>\n<ul>\n<li>通过点击磁盘图标保存截图及所有编辑；</li>\n<li>使用共享选项发送图像给朋友、家人或同事；</li>\n<li>打印图像；</li>\n<li>通过菜单选项在其他应用程序中打开图像。</li>\n</ul>\n<h3>使用Print Screen键截图</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">使用Print Screen键是一种传统的截图方式。该键通常位于大多数键盘的右上方，标签为Print Screen、PrtSc、PrtScn或PrntScrn。</p>\n<h4>如何捕获当前活动窗口</h4>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">要捕获当前活动窗口，请按照以下步骤操作：</p>\n<ul>\n<li>选择您想截图的窗口。</li>\n<li>按下 <code>Alt + Print Screen</code>。</li>\n<li>将其粘贴（<code>Ctrl + V</code>）到所选的Office程序或其他应用程序中。</li>\n</ul>\n<h4>如何捕获整个屏幕</h4>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">要复制整个屏幕上的图像，请遵循以下步骤：</p>\n<ul>\n<li>调整好您希望复制的内容。</li>\n<li>按下 <code>Print Screen</code>。</li>\n<li>将其粘贴（<code>Ctrl + V</code>）到所选的Office程序或其他应用程序中。</li>\n</ul>\n<h4>如何将截图保存为图像文件</h4>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">按照以下步骤将截图直接保存至桌面为图像文件：</p>\n<ul>\n<li>按下 <code>Windows键 + Print Screen</code>。</li>\n<li>在文件资源管理器中导航至 <strong>图片 &gt; 截图</strong> 文件夹以找到PNG格式的截图。</li>\n</ul>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">希望以上指南能帮助您更好地掌握在Windows 11中的截图技巧。如果您正在寻找合适的Windows 11设备，可以考虑浏览我们提供的各类Windows电脑，找到最适合您的那一款。</p>\n<h2>如何在 macOS 中截图</h2>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">翻译自：<a href=\"https://support.apple.com/en-us/102646\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">Take a screenshot on your Mac - Apple Support</a></p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在Mac上，您可以轻松地捕获整个屏幕、某个窗口或是仅仅是一部分屏幕的截图。</p>\n<h3>如何在Mac上截屏</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">要截取整个屏幕的图片，请同时按下这三个键：Shift、Command 和 3。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如果您在屏幕的一角看到了缩略图，可以点击它来编辑截图；或者等待截图自动保存到桌面上。</p>\n<h3>如何截取屏幕的一部分</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">要截取屏幕的一部分，请同时按下这三个键：Shift、Command 和 4。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">此时会出现一个十字光标，您可以拖动它来选择想要捕获的屏幕区域。要移动选择区域的位置，可以在拖动的同时按住空格键。如果要取消截屏，按下Esc（Esc键）即可。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">当您放开鼠标或触控板上的按钮时，截图即被拍摄下来。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如果您在屏幕的一角看到了缩略图，可以点击它来编辑截图；或者等待截图自动保存到桌面上。</p>\n<h3>如何截取某个窗口或菜单</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">首先打开您想要截取的窗口或菜单。接着同时按下这四个键：Shift、Command、4 和 空格键。这时指针会变成一个相机图标。如果要取消截屏，按下Esc（Esc键）即可。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">点击您想要截取的窗口或菜单。为了在截图时不包括窗口阴影，可以在点击时按住Option键。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如果您在屏幕的一角看到了缩略图，可以点击它来编辑截图；或者等待截图自动保存到桌面上。</p>\n<h3>在哪里查找截图</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">默认情况下，截图会被保存到您的桌面上，并命名为“Screen Shot [日期] at [时间].png”。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在macOS Mojave或更新版本的操作系统中，您可以从“截图”应用的“选项”菜单更改截图保存的默认位置。您也可以将截图的缩略图拖动到某个文件夹或文档中。</p>\n<h3>了解更多</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在macOS Mojave或更新版本的操作系统中，您还可以通过“截图”应用设置计时器，并选择截图保存的位置。要打开该应用，请同时按下这三个键：Shift、Command 和 5。更多关于“截图”应用的信息，请进一步查阅相关资料。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">一些应用程序，如Apple TV应用，可能不允许您对其窗口进行截图。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">若要将截图复制到剪贴板上，请在截屏时按住Control键。这样，您可以将截图粘贴到其他地方，或者使用通用剪贴板功能将其粘贴到另一台苹果设备上。</p>\n<h2>如何在 KDE 中截图</h2>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">摘自：<a href=\"https://userbase.kde.org/Taking_Screenshots\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">Taking Screenshots - KDE UserBase Wiki</a></p></blockquote>\n<h3>准则</h3>\n<ul>\n<li>如果不是中文截图，请把语言设为相应的语言</li>\n<li>把图片存为 PNG 格式</li>\n<li>最好使用默认设置（图标、配色、风格、窗口、应用设置等等）</li>\n<li>最好使用<strong>混成</strong> （<a href=\"https://userbase.kde.org/Special:MyLanguage/System_Settings\" target=\"_blank\" class=\"link\" title=\"Special:MyLanguage/System Settings\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">系统设置</a>里的桌面效果模块），如果你的显卡不支持混成那就别用了，别担心。</li>\n<li>最好使用 9 点的 “Liberation Sans” 字体</li>\n<li>如果截图展现的是部分桌面，最好使用 plasma 的默认背景。如有可能，给图片留个边（约20像素），这样就不像把窗口阴影给去了</li>\n<li>如果是张中文截图，请用原来的英文文件名，外加 “zh-cn” 这个语言码</li>\n<li>如果更新已有截图，请用相同的文件名，这样就自动更新了(常见 <a href=\"https://userbase.kde.org/Special:MyLanguage/Update_an_Image\" target=\"_blank\" class=\"link\" title=\"Special:MyLanguage/Update an Image\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">上传图片</a>).</li>\n</ul>\n<h3>步骤</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">下面这个例子用了 <a href=\"https://userbase.kde.org/Special:MyLanguage/KSnapshot\" target=\"_blank\" class=\"link\" title=\"Special:MyLanguage/KSnapshot\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">KSnapshot</a>，不过别的截屏应用也可以。</p>\n<img src=\"https://userbase.kde.org/images.userbase/thumb/4/48/Taking_Screenshots.png/500px-Taking_Screenshots.png\" alt=\"\"><ol start=\"1\">\n<li>运行 <a href=\"https://userbase.kde.org/Special:MyLanguage/KSnapshot\" target=\"_blank\" class=\"link\" title=\"Special:MyLanguage/KSnapshot\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">KSnapshot</a>\n</li>\n<li>从以下抓图模式中选一个：当前屏幕（只会在多屏幕环境下出现）抓取单个屏幕上的所有东西，常用于“桌面截图”。全屏所抓内容因屏幕个数而定，针对单屏幕用户抓取当前屏幕上的所有内容，对于多屏用户抓取所有屏幕到一个窗口。光标处的窗口抓取应用程序或对话框窗口的内容，常用于“应用程序截图”，选中“包含窗口装饰”选项就更好了。区域只抓取稍后界定的区域。</li>\n<li>单击<strong>新建抓图</strong>。全屏当前屏幕光标处的窗口单击屏幕的任一区域截图。区域1. 用鼠标在所抓区域（比如窗口）画个矩形。\n<ol start=\"1\"><li>按下<strong>回车</strong>键，或双击所选区域截图。</li></ol>\n</li>\n<li>单击<strong>另存为...</strong>。</li>\n<li>浏览想存图片的位置，命名（<strong><em>name.png</em></strong>）然后单击<strong>保存</strong>\n</li>\n</ol>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">To upload the image:</p>\n<ul>\n<li>If you are making a new version of an existing image, see <a href=\"https://userbase.kde.org/Special:MyLanguage/Update_an_Image\" target=\"_blank\" class=\"link\" title=\"Special:MyLanguage/Update an Image\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">Update an Image</a>\n</li>\n<li>If you are making a new image go to <a href=\"https://userbase.kde.org/Special:Upload\" target=\"_blank\" class=\"link\" title=\"Special:Upload\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">Upload File</a> under <strong>Tools</strong> in the right margin. That brings you to a page, where you can upload the image file.</li>\n</ul>\n<h3>提示和技巧</h3>\n<ul>\n<li>\n<strong>抓图延时</strong>选项让 <a href=\"https://userbase.kde.org/Special:MyLanguage/KSnapshot\" target=\"_blank\" class=\"link\" title=\"Special:MyLanguage/KSnapshot\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">KSnapshot</a> 在抓图前等上特定一段时间（单位是秒），在为下拉菜单截图为首的许多情况下都很管用</li>\n<li>为保证标准外观和默认设置，建立单独用于截图的用户往往有所帮助。</li>\n<li>在墙纸设置里调整<strong>颜色</strong>来得到白色背景。</li>\n</ul>\n</div>\n<p><a href=\"https://blog.redish101.top/article/how-to-cap-screen#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1726939819}, {"title": "reblog: 使用 Go + Next.js重构我的博客", "author": "Redish101博客", "pubDate": "2024-08-30 07:02:54", "link": "https://blog.redish101.top/article/introduce-reblog", "description": "\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/introduce-reblog\">https://blog.redish101.top/article/introduce-reblog</a>\n</blockquote>\n<div>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">2022年，我曾使用django开发过一个简单的动态博客框架Cooler：</p>\n<div>GitHub仓库：<a href=\"https://github.com/Cooler-dev/Cooler-old\">Cooler-dev<!-- -->/<!-- -->Cooler-old</a>\n</div>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">并且用了一段时间。之后觉得功能太少，又觉得hexo比较方便，就将博客迁移到了hexo。之后我学习了go，尝试用go重写cooler的后端：</p>\n<div>GitHub仓库：<a href=\"https://github.com/Cooler-dev/CoolerGo\">Cooler-dev<!-- -->/<!-- -->CoolerGo</a>\n</div>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">然后便遥遥无期，最终由换回了hexo。去年三月份，我将博客<a href=\"https://blog.redish101.top/article/refactor-my-blog-with-next\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">迁移到了Next.js</a>，并与去年七月份将博客<a href=\"https://blog.redish101.top/article/migrate-my-blog-to-nextjs-app-router-and-react-server-components\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">迁移到Next.js App Router</a>。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">期间我还尝试过halo，typecho，wordpress等动态博客框架，但因为对php，java等不熟练，无法进行进一步定制，就换回了hexo。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">今年年初，我开始尝试开发一个动态博客框架，并取名reblog。</p>\n<div>GitHub仓库：<a href=\"https://github.com/redish101/reblog\">redish101<!-- -->/<!-- -->reblog</a>\n</div>\n<h2>技术选型</h2>\n<h3>fiber</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">对于后端，我选择了fiber，fiber是一个轻量化的go http框架，由于其以fasthttp作为底层，所以有着相当不错的性能表现。同时，fiber有着类似于express的api风格，我相对比较熟悉。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在开始开发时，fiber v3处在开发阶段，但是redish相信fiber v3正式版会先reblog一步发布（）所以便使用了fiber v3作为底层。</p>\n<h3>gorm + gen</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">gorm是go开发中使用相当广泛的orm，功能较为齐全，但gorm并不是类型安全的，在调用一些接口时没有补全和检查：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">var product Product\ndb.First(&amp;product, 1) // find product with integer primary key\ndb.First(&amp;product, \"code = ?\", \"D42\") // find product with code D42</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如此处查询 <code>code</code>为 <code>D42</code>的产品，如果code拼写错误，编译阶段并不会导致错误，容易导致运行时异常。而gen通过代码生成实现了更为友好且不易出错的api：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">p := query.Product\nproduct, err := p.Where(p.Code.Eq(\"D42\")).First()</code></pre>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">但是代码生成让编译流程又复杂了一些.......</p></blockquote>\n<h3>Next.js</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">我对React比较熟悉一些，博客场景又需要良好的sso，所以自然选择next。</p>\n<h2>基本架构</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">reblog采用前后端分离的架构，分为三个部分：后端、控制台和主题（前端）。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">其中控制台嵌入到后端，用户通过访问后端对应url进入控制台。主题则通过HTTP API与后端交互，获取数据。</p>\n<h2>配置文件</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">yaml是一种常用的配置文件格式，相比于json更适合人类阅读，reblog采用yaml作为配置文件格式。为了未来的Serverless支持等一些不方便将配置信息明文储存在配置文件中，reblog提供了 <code>env(ENV_NAME)</code>这一特殊接口，在解析配置时读取环境变量，进行替换。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">例如使用vercel部署，由于fork无法设置为私有，所以需要将配置文件明文储存在仓库，为了避免数据库密码等信息的泄露，可以通过此接口从环境变量中读取配置：</p>\n<pre class=\"language-yaml lang-yaml\"><code class=\"language-yaml lang-yaml\"># reblog.yml\ndb:\n    type: postgres\n    host: localhost\n    # ...\n    pass: env(\"POSTGRES_PASSWORD\")\n    # ...</code></pre>\n<h2>依赖注入</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">reblog通过一个 <code>App</code>结构体封装查询，fiber，配置信息等依赖实例：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">type App struct {\n    config    *config.Config\n    fiber     *fiber.App\n    query     *query.Query\n    validator *validator.Validate\n    dev       bool\n\n    service *map[string]Service\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在启动时生成app实例：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">func Start() {\n    log.Info(\"欢迎使用reblog\")\n\n    config := config.NewFromFile()\n    app := core.NewApp(config)\n\n    loadPlugins(app)\n    app.Bootstrap()\n\n    LoadHttp(app)\n\n    log.Fatal(app.Listen())\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">通过传参的形式将app实例注入到handler：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">func ArticleAdd(app *core.App, router fiber.Router) {\n    router.Post(\"/:slug\", func(c fiber.Ctx) error {\n        a := app.Query().Article\n\n        var params ArticleAddParams\n        params.Slug = c.Params(\"slug\")\n        if isValid, resp := common.Param(app, c, &amp;params); !isValid {\n            return resp\n        }\n\n        article := &amp;model.Article{\n            Title:   params.Title,\n            Slug:    params.Slug,\n            Desc:    params.Desc,\n            Content: params.Content,\n            Draft:   &amp;params.Draft,\n        }\n\n        err := a.Create(article)\n\n        if err != nil {\n            return common.RespServerError(c, err)\n        }\n\n        return common.RespSuccess(c, \"操作成功\", nil)\n    }, common.Auth(app))\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">部分依赖（如验证器，查询等）直接作为 <code>App</code>结构体的字段，但也有一部分依赖（目前包含身份验证，Markdown渲染）动态注入，方便运行时的修改与插件侧的覆盖等操作，reblog将这些依赖统一封装为服务并以map的形式储存在 <code>App</code>结构体中：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">package core\n\nimport \"fmt\"\n\ntype Service interface {\n    Start() error\n    Stop() error\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">服务包含三个基本的接口，<code>NewXXService</code>，<code>Start</code>及 <code>Stop</code>：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">type MarkdownService struct {\n    app *App\n\n    renderer *markdown.Renderer\n    cache    map[string]string\n}\n\nfunc NewMarkdownService(app *App) *MarkdownService {\n    return &amp;MarkdownService{app: app}\n}\n\nfunc (s *MarkdownService) Start() error {\n    s.renderer = markdown.NewRenderer()\n    s.cache = make(map[string]string)\n\n    return nil\n}\n\nfunc (s *MarkdownService) Stop() error {\n    s.renderer = nil\n\n    return nil\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这部分接口会被统一调用，在注入等操作时调用，统一管理服务的生命周期：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">// 注入服务到App实例\nfunc (a *App) Inject(name string, service Service) {\n    (*a.service)[name] = service\n}\n\n// 注入服务到App实例, 并生成服务名称\nfunc AppInject[T Service](app *App, service T) {\n    log.Debugf(\"[SERVICE] 注入服务 %s\", getServiceName[T]())\n    app.Inject(getServiceName[T](), service)\n}\n\nfunc (app *App) Service(name string) (Service, error) {\n    if app.service == nil {\n        return nil, fmt.Errorf(\"服务未初始化\")\n    }\n\n    if _, isExits := (*app.service)[name]; !isExits {\n        return nil, fmt.Errorf(\"服务 %s 不存在\", name)\n    }\n\n    return (*app.service)[name], nil\n}\n\nfunc AppService[T Service](app *App) (T, error) {\n    service, err := app.Service(getServiceName[T]())\n\n    if err != nil {\n        var zero T\n        return zero, err\n    }\n\n    return service.(T), nil\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\"><code>AppInject</code>函数接受app指针与服务，向 <code>app.service</code>注入服务：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">func (app *App) initDefaultServices() {\n    AppInject(app, NewAuthService(app))\n    AppInject(app, NewMarkdownService(app))\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">注入时根据类型自动生成服务名称：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">func getServiceName[T any]() string {\n    var t T\n\n    // struct\n    name := fmt.Sprintf(\"%T\", t)\n    if name != \"&lt;nil&gt;\" {\n        return name\n    }\n\n    // interface\n    return fmt.Sprintf(\"%T\", new(T))\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\"><code>AppService</code>函数接收服务的类型和app指针，用以获取对应的服务实例：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">auth, err := core.AppService[*core.AuthService](app)\nauth.VerifyToken(token)</code></pre>\n<h2>身份验证</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">reblog使用jwt实现身份验证机制，登录时生成jwt并储存到客户端：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">claims := TokenClaim{\n    user.Username,\n    user.Password,\n    jwt.RegisteredClaims{\n        Issuer:    \"reblog-server\",\n        IssuedAt:  jwt.NewNumericDate(time.Now()),\n        ExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),\n    },\n}\n\ntoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\nsignedToken, _ := token.SignedString(a.key)\n\nreturn signedToken</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">通过校验token实现身份验证：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">parsedToken, err := jwt.ParseWithClaims(token, &amp;TokenClaim{}, func(t *jwt.Token) (interface{}, error) {\n    return a.key, nil\n})\n\nif err != nil {\n    return false\n}\n\nif _, ok := parsedToken.Claims.(*TokenClaim); ok &amp;&amp; parsedToken.Valid {\n    return true\n}\n\nreturn false</code></pre>\n<h2>控制台</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">动态博客自然是要有控制台的，控制台一般并不需要seo，且由于reblog使用go作为后端并不方便处理ssr，所以reblog控制台使用客户端渲染。由于我对react比较熟悉，所以控制台依然采用了react。但由于直接使用react开发要处理路由等基本框架，较为繁琐，所以控制台使用了umi进行开发。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">umi是一个基于react的前端开发框架，封装了路由、布局等常用的api，提供了从编码到构建各个阶段的轮子，能够使开发更快速。</p>\n<h2>插件</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">reblog实验性的支持运行时插件功能，插件开发者可以通过覆写、扩展或修改app结构体中的字段的形式在运行时更改reblog的行为。插件将被构建为动态链接库格式，并以服务的形式在运行时被加载，通过将app注入到插件中实现插件对reblog的修改。reblog在启动时会读取配置文件中的plugin字段，plugin字段是一个指向插件路径的数组，reblog将尝试加载对应路径下的插件。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">插件的路径最少有两个文件，<code>manifest.json</code>与插件的动态链接库。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\"><code>manifest.json</code>是插件的清单文件，用以声明插件的基本信息：</p>\n<pre class=\"language-json lang-json\"><code class=\"language-json lang-json\">{\n    \"name\": \"Hello\",\n    \"version\": \"0.1.0\",\n    \"path\": \"libhello.so\"\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">启动时reblog会加载清单中指定的动态链接库：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">p, err := plugin.Open(path + \"/\" + manifest.Path)</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">调用 <code>NewPlugin</code>方法，向插件注入依赖，并获取插件实例:</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">factoryFuncLookup, err := p.Lookup(fmt.Sprintf(\"New%sPlugin\", manifest.Name))\nif err != nil {\n    log.Warnf(\"[PLUGIN] 插件 %s 未实现 New%sPlugin 方法\", path, manifest.Name)\n}\n\nfactoryFunc := factoryFuncLookup.(func(*core.App) core.Service)\n\nservice := factoryFunc(app)\n\nif service == nil {\n    log.Warnf(\"[PLUGIN] 插件 %s 未返回有效服务实例\", manifest.Name)\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">然后向app注入插件服务：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">app.Inject(fmt.Sprintf(\"Plugin%s\", manifest.Name), service)</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">此时插件便可以以服务的形式参与到reblog的运行中，并通过修改app的形式修改reblog的行为，例如增加一个handler：</p>\n<pre class=\"language-go lang-go\"><code class=\"language-go lang-go\">func (p *HelloPlugin) Start() error {\n    log.Infof(\"[HelloPlugin] Start\")\n    p.app.Fiber().All(\"/api/hello\", func(c fiber.Ctx) error {\n        return common.RespSuccess(c, \"Hello from plugin!\", nil)\n    })\n\n    return nil\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">插件目前暂不能修改前端的行为，前端插件正在开发中，目前设想是插件通过下面的形式对外暴露api：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">const Dashboard: React.FC = () =&gt; \"Plugin Page...\"\n\nexport default definePlugin({\n    name: \"Hello\",\n    views: [\n        {\n            path: \"/\",\n            title: \"设置 Hello\",\n            icon: &lt;PluginIcon /&gt;,\n            component: &lt;Dashboard /&gt;\n        }\n    ]\n})</code></pre>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">也可能维护一个vite插件处理插件的打包及开发阶段的mock等（？）</p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">前端从后端或者cdn加载插件的打包产物，加载后调用插件暴露的api并以此修改前端的行为。前端插件可能更多适用于类似评论这种扩展型插件。</p>\n<h2>RSS</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">由于群友<a href=\"https://liushen.fun/\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">清羽飞扬</a>的强烈催更，我给reblog加入了rss功能。</p>\n<h2>ThemeKit</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">前文提到，reblog前后端之间使用HTTP API进行交互，而直接通过HTTP API交互较为繁琐，编码时没有提示，且当api接口变动时若不修改接口调用会导致异常。基于此，reblog提供了ThemeKit(<code>@reblog/themekit</code>)，将HTTP API封装，使主题能够通过js的形式调用api：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">import ThemeKit from \"@reblog/themekit\";\n \nconst themekit = new ThemeKit({\n  server: {\n    url: \"https://reblog.example.com\",\n  },\n  cache: \"no-store\",\n});\n\nconst ArticleList: React.FC = async () =&gt; {\n    const articles = await themekit.getArticleList({\n          pageIndex: 1,\n          pageSize: 10,\n    });\n  \n    return (\n        &lt;div&gt;\n            {articles.map(\n                article =&gt; &lt;Link href={`/article/${article.slug}`}&gt;{article.title}&lt;/Link&gt;\n            )}\n        &lt;/div&gt;\n    )\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">详细的api接口可见<a href=\"https://reblog-docs.redish101.top/develop/themekit\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">ThemeKit API文档</a>。</p>\n<h2>主题</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">前文提到，reblog提供ThemeKit方便主题的开发，所以主题可以专心的处理样式和渲染等，而不用与fetch斗智斗勇（</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">目前此网站所用的主题是<a href=\"https://github.com/Redish101/reblog-theme-next\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">reblog-theme-next</a>，使用Next.js开发。</p>\n<h2>Markdown渲染</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">reblog并不想过多约束主题的实现，希望让主题开发者能够得到更多自定义的便利，所以采用了前后端分离架构而非模板渲染，基于同样的目的，reblog后端除rss外，默认提供<strong>未经渲染</strong>的Markdown正文，方便主题自定义渲染逻辑以及实现。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">对于reblog-theme-next，我使用了remark处理文章的渲染，并使用了shiki处理高亮：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">const render = cache(async (content: string) =&gt; {\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype)\n    .use(rehypeShiki, { theme: \"github-dark\" })\n    .use(rehypeStringify);\n\n  const result = await processor.process(content);\n  return result.toString();\n});</code></pre>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">理论上reblog主题可以使用mdx甚至rst，latex等其他的格式作为正文格式，但可能需要主题提供对应的插件以支持渲染这些格式的正文。</p></blockquote>\n<h2>评论</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">因为我并不像再多部署一个评论的管理面板站，所以使用了支持嵌入式面板的twikoo。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">未来reblog可能会内置评论，目前暂定是重新复活基本停止维护的<a href=\"https://retalk.js.org/\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">retalk</a>，retalk后端与reblog一致均为fiber + gorm + gen的组合，所以可能能方便的嵌入到reblog后端中使用。</p>\n<h2>结语</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">reblog基本上是自用项目，当然如果你想用我也是支持的（），同时reblog的接口也比较有扩展性，欢迎来写主题或者插件（</p>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">目前的控制台似乎有点过于杂乱了，当时只想着就剩控制台这个小任务就完成了，所以控制台代码质量堪忧，准备在后端更为稳定后重新开发一个控制台，并使用自定义的ui代替antd。</p></blockquote>\n</div>\n<p><a href=\"https://blog.redish101.top/article/introduce-reblog#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1724972574}, {"title": "Deno再尝试：使用Deno编写一个简单的HTTP API", "author": "Redish101博客", "pubDate": "2024-07-23 04:13:46", "link": "https://blog.redish101.top/article/deno", "description": "\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/deno\">https://blog.redish101.top/article/deno</a>\n</blockquote>\n<div>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">两年前，我通过<a href=\"https://mk1.io/\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">Ray(@so1ve)</a>的博客系统<a href=\"https://github.com/dolan-x/dolan-server\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">dolan-x</a>：</p>\n<div>GitHub仓库：<a href=\"https://github.com/dolan-x/dolan-server\">dolan-x<!-- -->/<!-- -->dolan-server</a>\n</div>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">了解到了 <code>Deno</code>这一新的 js 运行时以及其对应的 saas 服务 <code>Deno Deploy</code>，为了<del>白嫖 <code>Deno Deploy</code></del>，决定尝试一下，用 Deno + oak + LeanCloud 写了一个简单的友链管理。但是 Deno 脆弱的生态和与 go 类似的基于 url 的模块系统（即使能通过 <code>import_map.json</code>定义别名）实在没有太多优势，最近 Deno Deploy 又被群友提及，看到 Deno 本身变化很大，便决定再尝试用 Deno 写一个东西。凑巧<a href=\"https://redish101.top/\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">个人主页</a>想加一个活动监测器，便决定用 Deno 来实现。</p>\n<h2>web 框架的选择</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">相比之前的友链，这次要做的比较简单，所以没有使用一些框架，而是直接使用标准库中的 <code>Deno.serve</code>实现。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\"><code>Deno.serve</code>接受一个函数，函数接受请求对象返回响应。</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">const handler = (req: Request) {\n    return new Response(\"Hello, World!\");\n}\n\nDeno.serve(handler);</code></pre>\n<h2>路由</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">Deno 本身并没有实现路由，但是可以通过手动解析 <code>pathname</code>实现。</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">const handler = (req: Request) {\n    const { pathname } = new URL(req.url);\n\n    if (pathname === \"/\") {\n        return new Response(\"Hello, World!\");\n    }\n\n    if (pathname === \"/foo\") {\n        return new Response(\"bar\");\n    }\n\n    return new Response(\"Not Found\", { status: 404 });\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">对于复杂的路由，可以尝试把 handler 封装到 map 中：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">type Handler = (req: Request) =&gt; Response;\ntype HandlerMap = { [pathname: string]: Handler };\n\nconst handlers: HandlerMap = {\n  \"/\": () =&gt; new Responese(\"Hello, World!\"),\n  \"/foo\": () =&gt; new Response(\"bar\"),\n};\n\nconst handler = (req: Request) =&gt; {\n  const { pathname } = new URL(req.url);\n\n  const matchedHandler = handlers[pathname];\n\n  if (matchedHandler) {\n    return matchedHandler(req);\n  }\n\n  return new Response(\"Not Found\", { status: 404 });\n};</code></pre>\n<h2>格式化响应</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">最好封装一个格式化响应对象，封装 <code>success</code>，<code>message</code>，<code>data</code>等属性，方便处理：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">class FmtResponse&lt;T&gt; {\n  private code: number = 200;\n  private success: boolean = true;\n  private message: string = \"success\";\n  private data: T | null = null;\n\n  constructor(opts: { code?: number; message?: string; data?: T }) {\n    if (opts.code &amp;&amp; opts.code &gt;= 400) {\n      this.success = false;\n    }\n    this.message = opts.message || \"success\";\n    this.data = opts.data || null;\n  }\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">并提供一个 <code>json</code>方法返回 json 格式的响应：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">public json() {\n    const resObj = {\n      success: this.success,\n      message: this.message,\n      data: this.data,\n    };\n\n    return new Response(JSON.stringify(resObj), {\n      status: this.code,\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type, apikey\",\n      },\n    });\n}</code></pre>\n<h2>数据的储存</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">选择 <code>Deno Deploy</code>很大一部分原因是因为其方便的 kv 储存，可以方便的持久化储存数据：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">const kv = await Deno.openKv();\n\nawait kv.set([\"settings\", \"username\"], \"redish101\");\n\nconst username = await kv.get([\"settings\", \"username\"]);\n\nconsole.log(username.value); // \"redish101\"</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">值得一提的是，<code>DenoKV</code>虽然可以在本地使用，但是需要在 cli 传入 <code>--unstable-kv</code>：</p>\n<pre class=\"language-bash lang-bash\"><code class=\"language-bash lang-bash\">deno run --unstable-kv main.ts</code></pre>\n<h2>监控数据的上报</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这部分没什么可说的，用 rust 写了一个上报器，每 20 分钟通过请求接口上报正常状态的数据，并作为 macOS 服务运行：</p>\n<pre class=\"language-rust lang-rust\"><code class=\"language-rust lang-rust\">use std::env;\n\nuse tokio::time;\nuse tracing::info;\n\n#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt::init();\n\n    info!(\"Welcome to remonitor!\");\n\n    let apiurl = \"https://redish101-remonitor.deno.dev/remonitor\";\n    let apikey = env::var(\"APIKEY\").unwrap();\n\n    let mut interval = time::interval(time::Duration::from_secs(1200));\n\n    loop {\n        interval.tick().await;\n        info!(\"Post status\");\n        reqwest::Client::new()\n           .get(apiurl)\n           .header(\"apikey\", apikey.clone())\n           .send()\n           .await\n           .expect(\"Failed to send request\");\n        info!(\"Sent request\");\n    }\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">macos 的服务不能直接读取环境变量，只能读取通过 <code>launchctl setenv</code>设置的环境变量。通过 plist 设置 <code>keepAlive</code>可以实现后台运行：</p>\n<pre class=\"language-xml lang-xml\"><code class=\"language-xml lang-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;top.redish101.remonitor&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/path/to/client&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;KeepAlive&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;</code></pre>\n<h2>部署</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\"><code>Deno Deploy</code>是Deno推出的saas服务，提供了Deno程序的部署、KV、定时任务等功能，并且速度不错，所以选择了通过Deno Deploy部署。</p>\n<h2>总结</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">Deno虽说目前不怎么适合放到大型项目的生产环境，但是写一些小服务玩玩还是很舒服的，编码体验很好</p>\n</div>\n<p><a href=\"https://blog.redish101.top/article/deno#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1721679226}, {"title": "国产光学顶起来了？永诺42.5mm f1.7 使用体验报告", "author": "小N同学的博客", "pubDate": "2024-04-23 02:40:27", "link": "https://www.imcharon.com/8557/", "description": "在这个镜头机身溢价的时代，国产能否发力抢出一片市场？", "categories": ["往日余生", "精选", "摄影", "照片", "镜头"], "time": 1713811227}, {"title": "【Magisk】方正悠黑 Google Sans VF On OPlus", "author": "小N同学的博客", "pubDate": "2024-03-27 14:33:01", "link": "https://www.imcharon.com/8539/", "description": "这是一款基于方正悠黑 Google VF Sans可变字体的OPlus机型字体模块 OPPO / OnePlu […]", "categories": ["往日余生", "教程", "maigsk", "root", "美化"], "time": 1711521181}, {"title": "【Magisk】Manrope腾祥黑体 VF On OPlus By Charon", "author": "小N同学的博客", "pubDate": "2024-03-25 17:53:32", "link": "https://www.imcharon.com/8525/", "description": "这是一款基于Manrope腾祥黑体 VF Sans可变字体的OPlus机型字体模块", "categories": ["往日余生", "教程", "magisk", "root", "美化"], "time": 1711360412}, {"title": "Bitwarden插件无法登录如何修复（Cannot read properties of nul(reading ‘iterations‘)）", "author": "小N同学的博客", "pubDate": "2024-03-22 17:58:32", "link": "https://www.imcharon.com/8514/", "description": "修复一个奇怪的BUG", "categories": ["往日余生", "教程", "bitwarden"], "time": 1711101512}, {"title": "SteamDeck开启samba服务", "author": "Yume.KISEKI", "pubDate": "2024-01-15 14:27:53", "link": "https://www.monoko.jp/steamdeck-samba/", "description": "\n<p>SteamDeck开启samba服务 1.前言 为什么steamdeck要开启samba服务，不为别的，我只用 […]</p>\n<p><a href=\"https://www.monoko.jp/steamdeck-samba/\">SteamDeck开启samba服务</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["share", "samba", "steamdeck"], "time": 1705300073}, {"title": "记录一次勇敢的旅程", "author": "小N同学的博客", "pubDate": "2023-12-30 13:56:09", "link": "https://www.imcharon.com/8477/", "description": "在12月初的时候，我计划了一场“特种兵”式的西部旅游计划。 不知道大家最近刷社交媒体，有没有刷到一句话： 纵观 […]", "categories": ["往日余生", "旅行"], "time": 1703915769}, {"title": "浅谈Quest3", "author": "Yume.KISEKI", "pubDate": "2023-11-25 15:41:21", "link": "https://www.monoko.jp/about-quest3/", "description": "\n<p>入手quest3 当初想买quest2时发现已经出了有两年了，对于vr这种可有可无的设备干脆就等quest3了 […]</p>\n<p><a href=\"https://www.monoko.jp/about-quest3/\">浅谈Quest3</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["share", "quest3", "vr"], "time": 1700898081}, {"title": "Windows电脑音频大优化！杜比音效+Fx Sound双调教！", "author": "小N同学的博客", "pubDate": "2023-10-29 11:56:50", "link": "https://www.imcharon.com/8447/", "description": "作为一名离开音乐会死星人，windows没有任何调教的声音听着真的很难受，但是单杜比的效果又有点差强人意，那怎 […]", "categories": ["往日余生", "教程", "精选", "资源分享", "windows", "音效"], "time": 1698551810}, {"title": "2023年QQBOT防风控小妙招", "author": "轻音时雨的博客", "pubDate": "2023-09-25 11:20:37", "link": "https://www.594594.xyz/2023/09/25/qqbot_anti_risk/", "description": "<p>本文内容禁止抄袭、转载、搬运</p>", "categories": ["游戏相关", "教程"], "time": 1695612037}, {"title": "关于站点的未来，和最近的状况", "author": "小N同学的博客", "pubDate": "2023-09-01 15:19:47", "link": "https://www.imcharon.com/8436/", "description": "最近的时间非常少，站点几乎处于无维护状态。 首先！我要向申请友链的小伙伴们说声对不起，因为太忙导致没时间更新！ […]", "categories": ["往日余生"], "time": 1693552787}, {"title": "termux 安装 aircrak-ng", "author": "Utermux博客", "pubDate": "2023-07-23 03:48:26", "link": "https://blog.utermux.dev/ut/aircrack-ng.html", "description": "pkg i tur-repo -ypkg i aircrack-ng -y", "categories": [], "time": 1690055306}, {"title": "termux 安装 mdk4", "author": "Utermux博客", "pubDate": "2023-07-23 03:47:53", "link": "https://blog.utermux.dev/ut/mdk4.html", "description": "pkg i tur-repo -ypkg i mdk4 -y", "categories": [], "time": 1690055273}, {"title": "Next.js App Router初体验与实践: 将我的博客迁移到Next.js App Router与React Server Components", "author": "Redish101博客", "pubDate": "2023-07-13 05:03:10", "link": "https://blog.redish101.top/article/migrate-my-blog-to-nextjs-app-router-and-react-server-components", "description": "\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230712213628.png\">\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230713131357.png\">\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230713131238.png\">\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/migrate-my-blog-to-nextjs-app-router-and-react-server-components\">https://blog.redish101.top/article/migrate-my-blog-to-nextjs-app-router-and-react-server-components</a>\n</blockquote>\n<div>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在今年三月初，我使用 Next.js 重构了我的博客。现在，随着 Next.js AppRouter 的稳定，我又将博客从 Next.js Pages Router 迁移到了 Next.js 13 AppRouter 与 React Server Components，同时，我也做了大量的底层重构以及样式重构。</p>\n<h2>性能优化: React Server Components</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在 React 18 之前，所有的组件均为 <code>Client Components</code>，即客户端组件。顾名思义，客户端组件中的所有逻辑均在客户端执行。浏览器渲染客户端组件需要从服务端获取 chunk，然后渲染组件到页面。即使是在 SSR 中，也需要等待客户端组件所对应的 bundle 完成加载才能让页面具有逻辑，能够交互。而我们的一些操作并不需要在客户端调用：如获取数据，大量的类似的逻辑，大大提高了 bundle 的体积，使得页面加载相对较慢，而 <code>React Server Components</code>（以下简称 <code>RSC</code>）的出现很好的解决了这一问题。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">RSC 不同于客户端组件，RSC 在服务端的 React 执行，客户端所收到的是服务端的执行结果，也就是说，客户端不会加载任何 RSC 的逻辑代码，以此我们就能缩小 Client Bundle。因为 RSC 是在服务端执行的，所以理所当然，RSC 内能够调用 node 环境，我们也就不必通过 <code>getStaticProps</code>等 api 获取数据。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">之前的文章提到过，我将博客从 Hexo 迁移到了基于文件的 CMS，以往博客版本是这样获取数据的：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">export async function getStaticPaths() {\n  const posts = getAllPosts([\"slug\"]);\n\n  return {\n    paths: posts.map((post) =&gt; {\n      return {\n        params: {\n          slug: post.slug,\n        },\n      };\n    }),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }: any) {\n  const post = getPostBySlug(params.slug, [\"title\", \"date\", \"slug\", \"content\"]);\n  const content = await markdownToHtml(post.content || \"\");\n  await generateRss();\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n    },\n  };\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">而在使用 RSC 后，我们可以直接获取数据：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">export default async function Post({ params }: { params: { slug: string } }) {\n  const post = getPostBySlug(params.slug, [\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"cover\",\n    \"content\",\n  ]);\n  if (!post.title) {\n    return notFound();\n  }\n  const content = await markdownToHtml(post.content || \"\");\n  return (\n    &lt;&gt;\n      &lt;Card title={post.title} cover={post.cover} label={post.date.toString()}&gt;\n        &lt;div dangerouslySetInnerHTML={{ __html: content }} /&gt;\n      &lt;/Card&gt;\n    &lt;/&gt;\n  );\n}\n\nexport async function generateStaticParams() {\n  const posts = getAllPosts([\"slug\"]);\n  return posts.map((post) =&gt; ({\n    slug: post.slug,\n  }));\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">可以看见，使用 RSC 后的页面相比于不使用 RSC 的页面大幅减少了代码长度。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">但正因 RSC 是在 node 环境运行的，所以我们不能在 RSC 使用浏览器的 api，也无法使用 <code>useState</code>等 api，也就是说，RSC 不能直接响应用户的交互。而当我们需要调用浏览器api时，可以通过在组件代码前加上 <code>\"use client\";</code>将组件更改为客户端组件，就能调用浏览器api。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">值得一提的是，我们可以在RSC中引入客户端组件：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">&lt;div&gt;\n  This is a RSC\n  &lt;ClientComponent /&gt;\n&lt;/div&gt;</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">但我们不能在客户端组件内引入RSC：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">&lt;ClientComponent&gt;\n  &lt;ServerComponent /&gt;\n&lt;/ClientComponent&gt;</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">但我们依然有办法在客户端组件内直接调用RSC。前文提到，RSC在渲染过程中需要node的参与，但是返回结果是相当于静态的，所以我们可以通过Props的方式向客户端组件传入RSC的返回值实现：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">&lt;ServerComponent&gt;\n  const res = &lt;AnotherSC /&gt;\n  &lt;ClientComponent aprop={res} /&gt;\n&lt;/ServerComponent&gt;</code></pre>\n<h2>布局优化： Next.js App Router</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在 Next.js 13 中，Next.js 新增了一种新的路由方式：<code>App Router</code>。它基于 <code>React Server Components</code>开发，支持共享布局，加载状态，嵌套路由，错误处理等。其中对我而言最重要的更新就是嵌套路由。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">App Router 将路由拆分为布局与内容两部分，其中布局支持嵌套，大大减少了代码冗余。例如我们要实现 AB 两个页面，二者都包含一个导航栏和一个侧边栏，B 页面在以上的基础下又包含其自身所需要的布局，即需要布局嵌套，在 <code>Pages Router</code>中，我们需要这样：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">// A.tsx\nexport default function A() {\n  return (\n    &lt;LayoutA&gt;\n      &lt;Content /&gt;\n    &lt;/LayoutA&gt;\n  );\n}</code></pre>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">// B.tsx\nexport default function B() {\n  return (\n    &lt;LayoutA&gt;\n      &lt;LayoutB&gt;\n        &lt;Content /&gt;\n      &lt;/LayoutB&gt;\n    &lt;/LayoutA&gt;\n  );\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">只有两层情况就已经如此糟糕，倘若有三层，四层.......代码的可读性将大大降低。但在 App Router 中，我们可以这样做:</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">// app/a/layout.tsx\nexport default RootLayout({ children }: { children: ReactNode }) {\n  return (\n      &lt;html lang=\"zh-CN\"&gt;\n      &lt;body&gt;\n        &lt;NavBar /&gt;\n        &lt;div&gt;\n          &lt;LayoutA&gt;{children}&lt;/LayoutA&gt;\n        &lt;/div&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  )\n}</code></pre>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">// app/a/b/layout.tsx\nexport default LayoutB({ children }: { children: ReactNode }) {\n  return &lt;LayoutA&gt;{children}&lt;/LayoutA&gt;\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">此时，b 页面的布局会自动继承 a 的布局，并在其基础上新增其自身布局，代码会十分简洁。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">除了语法更加简洁，我们也可以通过AppRouter实现共享布局。</p>\n<h2>服务端: 从 SSG 迈向 SSR</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在<a href=\"https://blog.redish101.top/post/blog-v5\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">「使用 Next.js 重构我的博客」</a>一文中我提到，我将博客核心所使用的 CMS 从 <code>Hexo</code>迁移到自研的基于文件的 CMS，在构建时使用 <code>Next.js Pages Router</code>提供的 <code>getStaticProps</code>等一系列 api 在构建时从本地获取文章并渲染，但在我迁移博客到 <code>Next.js App Router</code>时这样的做法无法通过构建，原因是 App Router 并不支持使用 <code>getStaticProps</code>等 api 获取数据。同时，在构建时渲染 Markdown 也会导致构建速度很慢，在考虑之下，我决定放弃 SSG，迈向 SSR。但现在依然有一个问题，现在服务端在收到请求后，会根据请求路径中的 slug 查找文章，并读取文章内容，但当文件不存在时，node 的 fs api 就会抛出错误，使 <code>getPostBySlug</code>方法没有返回任何内容，进而导致服务端返回 500，所以我们需要在 <code>getPostBySlug</code>方法中检测 slug 是否存在，若不存在则返回空对象而不是没有返回值：</p>\n<pre class=\"language-ts lang-ts\"><code class=\"language-ts lang-ts\">if (!fs.existsSync(fullPath)) {\n  return items;\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在调用时检测返回对象是否包含 slug：</p>\n<pre class=\"language-ts lang-ts\"><code class=\"language-ts lang-ts\">if (!post.title) {\n  return notFound();\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\"><code>notFound()</code>是 Next.js 提供的方法，可以手动返回 404。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这时，我们再尝试访问不存在的文章，服务端会返回 404，而非 500。</p>\n<h2>元数据: 从 next/head 到 Next Metadata</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在 Pages Router 中，我们可以在页面中返回 <code>Head</code>组件自定义页面的元数据：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">import Head from \"next/head\";\n\nexport default function PageA() {\n  return (\n    &lt;Head&gt;\n      &lt;title&gt;Your Title&lt;/title&gt;\n    &lt;/Head&gt;\n  );\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">而在 App Router 中，我们可以通过导出 <code>metadata</code>的方法设置元数据：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">import { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Your Title\",\n};</code></pre>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">简介等属性同理</p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">除了静态导出，我们还可以通过导出 <code>generateMetadata</code>函数实现动态设置元数据：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">export async function generateMetadata({\n  params,\n}: {\n  params: { slug: string };\n}): Promise&lt;Metadata&gt; {\n  const post = getPostBySlug(params.slug, [\"title\", \"content\"]);\n  if (!post.title) {\n    return {\n      title: `404 - ${config.name}`,\n    };\n  }\n  return {\n    title: `${post.title} - ${config.name}`,\n    description: post.content.slice(0, 200),\n  };\n}</code></pre>\n<h2>Markdown 渲染: 从 remark 到 marked</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在以往的版本中，我使用 <code>remark</code>完成 Markdown 的渲染，但我逐渐发现，remark 逐渐无法满足我的需求，所以更换到 <code>marked</code>。marked 支持自定义渲染器，可以更方便的修改渲染逻辑。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">本站的 markdown 渲染被封装到了一个 <code>markdownToHtml</code>函数，所以更改渲染器十分方便：</p>\n<pre class=\"language-ts lang-ts\"><code class=\"language-ts lang-ts\">export default async function markdownToHtml(markdown: string) {\n  const renderer = new marked.Renderer();\n\n  renderer.code = function (code, language) {\n    // 添加hljs类和data-language属性\n    let lang = language ? language.toUpperCase() : \"\";\n    if (!language) {\n      lang = \"TEXT\";\n    }\n    if (language == \"\") {\n      language = \"plaintext\";\n    }\n    const highlightedCode = highlightjs(code, language);\n    return `&lt;pre class=\"hljs language-${lang}\" data-language=\"${lang}\"&gt;\n      &lt;code&gt;${highlightedCode}&lt;/code&gt;\n    &lt;/pre&gt;`;\n  };\n  return marked.parse(markdown, { mangle: false, headerIds: false, renderer });\n}</code></pre>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">完整的渲染器代码较长，此处仅展示部分代码，可能无法单独使用</p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">React 无法直接将 html 嵌入到组件作为子元素使用，但提供了属性 <code>dangerouslySetInnerHTML</code>供开发者显示 html 字符串，所以在这里可以这样写：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">export default async function Post({ params }: { params: { slug: string } }) {\n  const post = getPostBySlug(params.slug, [\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"cover\",\n    \"content\",\n  ]);\n  if (!post.title) {\n    return notFound();\n  }\n  const content = await markdownToHtml(post.content || \"\");\n  return (\n    &lt;&gt;\n      &lt;Card title={post.title} cover={post.cover} label={post.date.toString()}&gt;\n        &lt;div&gt;\n          &lt;div&gt;{post.desc}&lt;/div&gt;\n          &lt;div dangerouslySetInnerHTML={{ __html: content }} /&gt;\n        &lt;/div&gt;\n      &lt;/Card&gt;\n    &lt;/&gt;\n  );\n}</code></pre>\n<h2>代码高亮: 自定义主题</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">以往版本中，正文部分所使用的代码高亮主题是由 <code>github-markdown-css</code>提供的，我逐渐发现其设计不满足我的需求，便进行了自定义。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">代码高亮配色我觉得没有必要更改，但是 <code>highlight.js</code>提供的主题不支持深色模式，我就不得不手写配色。我将包含深色模式的配色放到了全局变量中：</p>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">:root {\n  --pre: #fafafa;\n  --pre-comment: #6a737d;\n  --pre-string: #032f62;\n  --pre-literal: #032f62;\n  --pre-keyword: #d73a49;\n  --pre-function: #6f42c1;\n  --pre-deleted: #24292e;\n  --pre-class: #22863a;\n  --pre-property: #005cc5;\n  --pre-namespace: #6f42c1;\n  --pre-punctuation: #24292e;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --pre-comment: #757575;\n    --pre-string: #977cdc;\n    --pre-literal: #c64640;\n    --pre-keyword: #77b7d7;\n    --pre-function: #86d9ca;\n    --pre-deleted: #fff;\n    --pre-class: #dfab5c;\n    --pre-property: #77b7d7;\n    --pre-namespace: #86d9ca;\n    --pre-punctuation: #fff;\n  }\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">然后在 highlight.js 提供的默认主题基础上做修改，将颜色从固定值改为变量：</p>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">.hljs {\n  color: var(--text);\n  background: var(--pre);\n}\n.hljs-doctag,\n.hljs-keyword,\n.hljs-meta .hljs-keyword,\n.hljs-template-tag,\n.hljs-template-variable,\n.hljs-type,\n.hljs-variable.language_ {\n  color: var(--pre-keyword);\n}\n.hljs-title,\n.hljs-title.class_,\n.hljs-title.class_.inherited__,\n.hljs-title.function_ {\n  color: var(--pre-function);\n}</code></pre>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">此处因篇幅原因只展示部分</p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">原有代码块并没有直接显示语言，容易产生歧义。出现了以下设计方案：</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230712213628.png\" alt=\"两种方案\"><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">显然第一种更显眼并具有设计感。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">具体实现我使用了 <code>before</code>伪类的方式，通过 <code>attr(data-language)</code>读取自定义渲染器所输入的语言名称：</p>\n<pre class=\"language-ts lang-ts\"><code class=\"language-ts lang-ts\">return `&lt;pre class=\"hljs language-${lang}\" data-language=\"${lang}\"&gt;\n      &lt;code&gt;${highlightedCode}&lt;/code&gt;\n    &lt;/pre&gt;`;</code></pre>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">pre::before {\n  color: var(--text-l);\n  opacity: 0.25;\n  content: attr(data-language);\n  font-size: 1.625rem;\n  font-weight: 700;\n  position: absolute;\n  right: 0.5rem;\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">至此完成了代码块的修改。</p>\n<h2>CSS: Atomic CSS In JS</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">传统的css在使用重复布局时回产生大量冗余，例如以下三个类：</p>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">.a {\n  padding: 1.125rem;\n  color: pink;\n}\n\n.b {\n  padding: 1.125rem;\n  color: skyblue;\n}\n\n.c {\n  margin: 1.125rem;\n  color: pink;\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">可以看见，<code>pading: 1.125rem</code>与 <code>color: pink</code>被在css中出现了多次，现在这个css文件共有6个属性。我们可以将它们拆分，封装成4个类：</p>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">.p-125 {\n  pading: 1.125rem;\n}\n\n.color-pink {\n  color: pink;\n}\n\n.color-skyblue {\n  color: skyblue;\n}\n\n.m-125 {\n  margin: 1.125rem;\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在html中我们可以直接使用这些类的组合实现与第一种方式相同的效果，这就是原子化css。使用原子化设计的css只出现了4个属性。不难看出，原子化css能够减少css的体积。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在实际使用中，我们往往会使用已经绑定好的原子化css库，例如tailwindcss等。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">但是，这种做法会导致代码中有一大串的类名，显然不够优雅。所以，我使用了 <code>style9</code>，实现atomic css in js，您可以打开devtools查看效果。</p>\n<h2>布局设计: 拥抱双飞翼</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">以往版本的博客使用单栏设计，只留出中间一栏展示所有信息，这样做实现简单，但会导致比较单调。在新博客的设计中，我采用了「双飞翼」布局，即三栏布局：</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230713131357.png\" alt=\"三栏布局\"><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">将布局拆分为 <code>Sidebar</code>与 <code>Content</code>，使用Next App Router可以实现路由跳转只加载 <code>Content</code>。具体实现使用 <code>CSS Flex</code>布局。</p>\n<h2>基础设计: Card</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如你所见，本站现在的所有组件都是卡片，基础是一个具有 <code>title</code>，<code>label</code>，<code>content</code>，<code>size</code>，<code>cover</code>等众多属性的组件：</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230713131238.png\" alt=\"布局演示\"><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">以此保证样式的统一。</p>\n<h2>深色模式: CSS变量</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">深色模式能够提高用户体验，为了实现深色模式，我为深色模式单独设计了配色，并通过 <code>@media (prefers-color-scheme: dark)</code>实现根据系统设置自动切换。</p>\n<h2>友情链接: 从静态到动态</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">以往的友情链接是静态储存的，这样做难免会有局限性，在新版博客中，我将友情链接数据迁移到了GitHub仓库，并通过 <code>Chuqi CDN</code>实时获取友情链接信息。</p>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">你想与101互换友情链接吗，那就看看下面的步骤吧</p></blockquote>\n<h3>前置条件</h3>\n<ul>\n<li>友情链接，先友后链，所以最好是101比较眼熟的朋友</li>\n<li>您的网站不是免费域名，包括但不限于：\n<ul>\n<li>由Freenom公司运营的 <code>.tk</code>，<code>.ml</code>等免费域名（不包括付费购买的域名）</li>\n<li>由 Joshua Anderson 运营的 Afraid FreeDNS 提供的免费子域名</li>\n<li>其他不包含在 Public Suffix List 中的 <strong>免费子域名</strong> 服务</li>\n<li>\n<code>*.github.io</code>，<code>*.gitee.io</code>等域名</li>\n</ul>\n</li>\n<li>不能是采集站！！！！！！！！！</li>\n<li>有三篇以上的原创文章（包括三篇）</li>\n<li>站点上有我的链接</li>\n</ul>\n<h3>我的信息</h3>\n<pre class=\"language-json lang-json\"><code class=\"language-json lang-json\">{\n  \"name\": \"Redish101 Blog\",\n  \"desc\": \"人文 科技 白日梦\",\n  \"icon\": \"https://blog.redish101.top/favicon.ico\",\n  \"link\": \"https://blog.redish101.top\"\n}</code></pre>\n<h3>添加</h3>\n<blockquote><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">仓库: <a href=\"https://github.com/Redish101/friend-links\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">https://github.com/Redish101/friend-links</a></p></blockquote>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如果你满足前置条件，就可以开始提交。</p>\n<ol start=\"1\">\n<li>Fork本仓库</li>\n<li>更改data.json</li>\n<li>添加你的网站</li>\n<li>向本仓库提交pr</li>\n<li>等待审核</li>\n<li>审核完成后将会在Redish101 Blog下次构建时生效</li>\n</ol>\n<h2>尾声</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">感谢阅读</p>\n</div>\n<p><a href=\"https://blog.redish101.top/article/migrate-my-blog-to-nextjs-app-router-and-react-server-components#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1689195790}, {"title": "Termux 安装xLog", "author": "Utermux博客", "pubDate": "2023-05-06 10:04:00", "link": "https://blog.utermux.dev/ut/xLog.html", "description": "Termux 安装xLog", "categories": [], "time": 1683338640}, {"title": "Termux安装各版本gcc", "author": "Utermux博客", "pubDate": "2023-04-30 08:32:00", "link": "https://blog.utermux.dev/ut/gcc.html", "description": "Termux安装各版本gcc", "categories": [], "time": 1682814720}, {"title": "Termux安装Vscode以及code-server", "author": "Utermux博客", "pubDate": "2023-04-30 08:29:15", "link": "https://blog.utermux.dev/ut/vscode.html", "description": "Termux安装Vscode以及code-server", "categories": [], "time": 1682814555}, {"title": "为我的网站添加深色模式", "author": "Redish101博客", "pubDate": "2023-03-28 13:06:55", "link": "https://blog.redish101.top/article/darkmode", "description": "\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/darkmode\">https://blog.redish101.top/article/darkmode</a>\n</blockquote>\n<div>\n<h2>我们为什么需要「深色模式」</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">不可避免的，我们在很多时候需要在黑暗的环境下访问网站，而在黑暗的环境下，如果网站依然有大部分亮色区域，会在瞬间使眼睛受到刺激，极大的降低了用户体验。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">同时，深色模式能减少OLED屏幕的功耗，延长设备的使用时间这也是很多人在白天也依然打开深色模式的原因。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">如今，很多操作系统已经支持了深色模式，macos也提供了很好的深色模式支持。Chrome、FireFox等主流浏览器也已经支持通过 <code>prefers-color-scheme</code>单独定义深色模式下的样式，这也降低了我们制作深色模式的难度。</p>\n<h2>「深色模式」的切换逻辑</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">前面提到，我们可以通过 <code>prefers-color-scheme</code>来单独定义深色模式的样式，而 <code>prefers-color-scheme</code>是跟随系统的，显然，这种方式可以较好符合用户的个人喜好。</p>\n<h3>\n<code>prefers-color-scheme</code>的兼容问题</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">的确，<code>prefers-color-scheme</code>对于低版本的浏览器适配并不友好，但是考虑到本站用户群体，这种问题几乎不会发生(其实是我懒)，所以就没有做过多处理。</p>\n<h2>「深色模式」的前端实现</h2>\n<h3>单独编写样式</h3>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">body {\n  color: #000;\n}\n\n@media (prefers-color-scheme: dark) {\n  body {\n    color: #fff;\n  }\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">显然，这种方式繁琐且复杂。</p>\n<h3>使用CSS Variable</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">本站的配色信息都是以CSS Variable的形式存放在一个单独的css(global.css)中的，并在其他的css文件中可以直接通过 <code>var(xxxx)</code>引用，所以，我们可以为深色模式和亮色模式设计两种配色，并通过第一种方法实现，就可以实现自动的深色模式切换。</p>\n<pre class=\"language-css lang-css\"><code class=\"language-css lang-css\">:root {\n  --bg: #f2f5f8;\n  --card-bg: #fff;\n  --text: #000;\n  --link: #007bff;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: #0d1117;\n    --card-bg: #161b22;\n    --text: #c9d1d9;\n    --link: #58a6ff;\n  }\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">本站就是用的这种方法，在你的系统设置中切换配色即可体验。</p>\n</div>\n<p><a href=\"https://blog.redish101.top/article/darkmode#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1679980015}, {"title": "使用Next.js重构我的博客", "author": "Redish101博客", "pubDate": "2023-03-04 04:33:10", "link": "https://blog.redish101.top/article/refactor-my-blog-with-next", "description": "\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230304193114.png\">\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230304193416.png\">\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/refactor-my-blog-with-next\">https://blog.redish101.top/article/refactor-my-blog-with-next</a>\n</blockquote>\n<div>\n<h2>技术选型</h2>\n<h3>React VS Vue</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在这两者之间，我对React的使用更加熟练些，而且我认为使用TSX开发React应用的体验是愉悦的，所以选择React。</p>\n<h3>Gatsby VS Next.js</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这两者都是十分优秀的React框架，但我一直无法成功配置Gatsby环境，而且考虑到应用以后可能使用服务端渲染，所以选择Next.js。</p>\n<h3>SSR VS SSG</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">博客目前并没有一些复杂的功能需要使用SSR实现，为了节省性能，选择了Next.js的SSG（以后会计划开发管理后台，所以以后可能会更换为SSR）。</p>\n<h2>UI设计</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">为了提高界面主题的美观，降低实现的难度，我设计了较为简单（简陋）的ui，并做了移动端适配，尽量让移动端的用户能有较好的体验。</p>\n<h2>内容管理</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">最开始，我准备效仿苏卡卡，使用hexo管理文章，但在进行一段时间的开发后，发现我对hexo api的了解无法满足使用。最后，我选择将文章储存为Markdown文件，并在每次更新后将其渲染为静态页面。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在众多Markdown渲染库中，我选择使用比较简单易用的 <code>remark</code>将markdown渲染为html：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">import { remark } from \"remark\";\nimport html from \"remark-html\";\n\nexport default async function markdownToHtml(markdown: string) {\n  const result = await remark().use(html).process(markdown);\n  return result.toString();\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">搞定正文的渲染，还有一个问题，由于并没有使用数据库文章信息，所以需要将文章信息放到 <code>front matter</code>内，再在构建时解析，转换为js能够读取的数据格式，并储存到页面的 <code>props</code>中，供前端使用。在处理 <code>front-matter</code>中，我选择了 <code>gray-matter</code>。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在读取Markdown并处理后，需要将文章数据传递给前端，供前端使用，但我并没有使用SSR，所以无法做到获取实时的文章数据，但得益于强大的Next.js，我们可以通过 <code>getStaticProps</code>，<code>getStaticPaths</code>在执行构建时获取数据，储存到props中，例如文章详情页的数据可以这样获取：</p>\n<pre class=\"language-typescript lang-typescript\"><code class=\"language-typescript lang-typescript\">export async function getStaticPaths() {\n  const posts = getAllPosts([\"slug\"]);\n\n  return {\n    paths: posts.map((post) =&gt; {\n      return {\n        params: {\n          slug: post.slug,\n        },\n      };\n    }),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }: any) {\n  const post = getPostBySlug(params.slug, [\"title\", \"date\", \"slug\", \"content\"]);\n  const content = await markdownToHtml(post.content || \"\");\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n    },\n  };\n}</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这样在前端就可以十分方便的使用数据：</p>\n<pre class=\"language-tsx lang-tsx\"><code class=\"language-tsx lang-tsx\">export default function Post(props: props) {\n  const router = useRouter();\n  const post = props.post;\n  const title = `${post.title} | Redish101 Blog`;\n  if (!router.isFallback &amp;&amp; !post?.slug) {\n    return &lt;Error404 /&gt;;\n  }\n  return (\n    &lt;&gt;\n      &lt;Head&gt;\n        &lt;title&gt;{title}&lt;/title&gt;\n      &lt;/Head&gt;\n      &lt;PostBody title={post.title} date={post.date} content={post.content} /&gt;\n    &lt;/&gt;\n  );\n}</code></pre>\n<h2>样式实现</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在众多css in js库中，我选择了 <code>griffel</code>，通过 <code>makeStyles()</code>定义样式， <code>useStyles()</code>使用样式。使用它定义样式，在编码过程中ide会给出效果较好的代码提示，且由于其类名经过了处理，不会导致不同组件类名重复导致的样式冲突：</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230304193114.png\" alt=\"\"><p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在开发的过程中节约了很多时间，生成的随机类名可以很好的避免类名重复导致的错误：</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20230304193416.png\" alt=\"\"><h2>一言</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在新版博客的首页，我将原来固定的副标题替换为从一言api获取一句质量较高的话作为副标题，数据的获取与文章数据的获取一样，都使用 <code>getStaticProps</code>在构建时获取，所以一言的更新频率完去取决于我的更新频率。</p>\n<h2>部署</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">网站的部署有以下几个选择：服务器部署，vercel，netlify。前面说过，本站是静态网站，所以如果选择服务器部署，在每次内容更新后都需要上传到服务器，浪费时间，即使使用ci，服务器由于地域原因也无法从GitHub拉取网站源码进行构建，所以率先出局。在vercel和netlify中我选择vercel，一是使用熟练，二是对Next.js有较好的支持，若是以后更改为ssr也很方便。</p>\n<h2>重构博客给我带来了什么</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">Nextjs SSG网站的性能明显是要好于动态博客的，而且构建速度也比之前用Hexo的时候更快。而且自己造的轮子，自己肯定更熟悉，改起来也方便。</p>\n</div>\n<p><a href=\"https://blog.redish101.top/article/refactor-my-blog-with-next#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1677875590}, {"title": "非4k显示器开启hidpi", "author": "Yume.KISEKI", "pubDate": "2023-02-11 04:29:27", "link": "https://www.monoko.jp/enable-hidpi/", "description": "\n<p>macOS想要完美体验hidpi只能是换上4k及以上显示器，如果用上苹果自家的6K Pro Display X […]</p>\n<p><a href=\"https://www.monoko.jp/enable-hidpi/\">非4k显示器开启hidpi</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["share", "BetterDisplay", "hidpi", "macOS"], "time": 1676060967}, {"title": "Artalk公益服务 已阵亡", "author": "小N同学的博客", "pubDate": "2023-02-04 16:49:39", "link": "https://www.imcharon.com/1505/", "description": "自从4月15日以来，服务器经受了长期DDoS，目前已经彻底放弃抵抗了，没办法了。", "categories": ["往日余生", "公益服务"], "time": 1675500579}, {"title": "Pro App 教育套装", "author": "Yume.KISEKI", "pubDate": "2023-02-02 14:24:50", "link": "https://www.monoko.jp/pro-app/", "description": "\n<p>一个Final Cut Pro多少钱？是1998元 一个教育优惠套装多少钱？是1298元(前几年是1543元) […]</p>\n<p><a href=\"https://www.monoko.jp/pro-app/\">Pro App 教育套装</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["share", "Apple教育优惠", "Final Cut Pro"], "time": 1675319090}, {"title": "memos纯公益代部署服务", "author": "小N同学的博客", "pubDate": "2023-02-02 03:01:14", "link": "https://www.imcharon.com/1467/", "description": "具体memos参考基于Memos实现说说和清单功能。 | Leonus 云备份，每天备份数据至onedrive […]", "categories": ["往日余生", "公益服务"], "time": 1675278074}, {"title": "一款好用的摄影包——Bellroy Venture Sling 10L", "author": "Yume.KISEKI", "pubDate": "2023-01-15 13:40:21", "link": "https://www.monoko.jp/bellroy-venture-sling-10l/", "description": "\n<p>终于还是灭门了佳能，转而马上投入大法的怀抱，真香。话说都2023年了确实早已是无反的时代了，还好我的5d4和它 […]</p>\n<p><a href=\"https://www.monoko.jp/bellroy-venture-sling-10l/\">一款好用的摄影包——Bellroy Venture Sling 10L</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["share", "Bellroy"], "time": 1673761221}, {"title": "Termux安装maturin模块", "author": "Utermux博客", "pubDate": "2023-01-09 06:15:00", "link": "https://blog.utermux.dev/ut/maturin.html", "description": "Termux安装maturin模块", "categories": [], "time": 1673216100}, {"title": "Termux安装mitmproxy", "author": "Utermux博客", "pubDate": "2022-12-26 07:08:00", "link": "https://blog.utermux.dev/ut/mitmproxy.html", "description": "Termux安装mitmproxy", "categories": [], "time": 1672009680}, {"title": "解决acme.sh签发SSL证书失败", "author": "Yume.KISEKI", "pubDate": "2022-12-18 04:39:26", "link": "https://www.monoko.jp/create-ssl-with-acme-sh/", "description": "\n<p>前段时间在甲骨文云成功开了台arm的机器后一直闲置没用，最近看到甲骨文云开始有回收清理白嫖机器的动作了，吓得我 […]</p>\n<p><a href=\"https://www.monoko.jp/create-ssl-with-acme-sh/\">解决acme.sh签发SSL证书失败</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["vps", "acme.sh"], "time": 1671309566}, {"title": "「古典文法」推量系の助動詞の関係性", "author": "Yume.KISEKI", "pubDate": "2022-12-04 07:34:51", "link": "https://www.monoko.jp/suiryokei-no-jyodoushi/", "description": "\n<p>不难发现在助动词中有那么一堆词都带有推定的意思，我们可以称之为推量系助动词，对于这些词之间的关系总结如下图，可 […]</p>\n<p><a href=\"https://www.monoko.jp/suiryokei-no-jyodoushi/\">「古典文法」推量系の助動詞の関係性</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["古典文法", "助动词", "推量系", "日语古文"], "time": 1670110491}, {"title": "好用的ssh客户端工具—electerm", "author": "Yume.KISEKI", "pubDate": "2022-11-30 14:13:22", "link": "https://www.monoko.jp/ssh-electerm/", "description": "\n<p>前段时间偶然发现一款开源ssh客户端——electerm，三大平台全能型，多语言支持，支持sftp并且能直接编 […]</p>\n<p><a href=\"https://www.monoko.jp/ssh-electerm/\">好用的ssh客户端工具—electerm</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["software", "electerm"], "time": 1669788802}, {"title": "异常低价的CleanMyMac X", "author": "Yume.KISEKI", "pubDate": "2022-11-20 02:30:00", "link": "https://www.monoko.jp/low-price-of-cleanmymac/", "description": "\n<p>近期需要用到笔记本电脑一段时间，也就突然想到还有台14款的mbp正好可以拿来用段时间，系统是一代代升级到了最终 […]</p>\n<p><a href=\"https://www.monoko.jp/low-price-of-cleanmymac/\">异常低价的CleanMyMac X</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["software", "CleanMyMac X"], "time": 1668882600}, {"title": "遭遇xmrig挖矿病毒", "author": "Yume.KISEKI", "pubDate": "2022-10-21 15:39:10", "link": "https://www.monoko.jp/cryptojacking-xmrig/", "description": "\n<p>起因 前段时间conoha为纪念突破50万用户大搞活动，看着优惠力度和近期的日元汇率是真的香！但太久没用con […]</p>\n<p><a href=\"https://www.monoko.jp/cryptojacking-xmrig/\">遭遇xmrig挖矿病毒</a>最先出现在<a href=\"https://www.monoko.jp/\">Yume.KISEKI</a>。</p>\n", "categories": ["vps", "xmrig"], "time": 1666337950}, {"title": "[通知] 我们的Termux镜像", "author": "Utermux博客", "pubDate": "2022-07-19 08:47:00", "link": "https://blog.utermux.dev/ut/mirror.html", "description": "[通知] 我们的Termux镜像", "categories": [], "time": 1658191620}, {"title": "Github Codespaces初体验", "author": "Redish101博客", "pubDate": "2022-06-19 10:52:04", "link": "https://blog.redish101.top/article/github-codespace", "description": "\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20220610210634.png\">\n<link rel=\"preload\" as=\"image\" href=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20220610211120.png\">\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/github-codespace\">https://blog.redish101.top/article/github-codespace</a>\n</blockquote>\n<div>\n<h1>这是什么</h1>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在去年，GitHub上线了一个的新功能：<code>Codespaces</code>，使用Codespaces可以随时随地在浏览器里编辑、调试、运行托管在GitHub的代码。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">在前几天，GitHub将此功能开放公测，任何用户都能申请使用，我，于是就有了这篇文章。</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20220610210634.png\" alt=\"邮件\"><h1>性能</h1>\n<h2>硬件配置</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">先说性能，GitHub面对个人项目提供了一台4Cores 8RAM的设备，这性能对于普通的开发那是绰绰有余，话不多说，上bench截图：</p>\n<img src=\"https://jsd.onmicrosoft.cn/gh/Redish101/cdn@src/img/20220610211120.png\" alt=\"测试结果\"><h2>网络</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">配置虽好值得夸赞，但这网络之遭也十分的影响使用，在笔者试用的时候，2个小时中断线了将近十次。虽然大部分时间下编辑器的使用没有发现明显卡顿，但终端在使用时的卡顿是真的让人无法忍受。</p>\n<h2>终端相关</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">Github Codespaces的终端是可以通过 <code>sudo su</code>进入root用户的，也可以直接通过 <code>sudo</code>命令来运行需要root权限的服务。</p>\n<h2>自动休眠</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这是非常重要的一个点，是我们白嫖之路的最大绊脚石，在一段时间（暂未明确结果）内如果编辑器没有活跃，codespace就会自动关闭。</p>\n<h1>写代码</h1>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">Codespaces使用了web版本的VS Code，所以说编辑体验是与直接在本地使用Code编辑并无不同，经过测试，也能完美的适配各种插件。运行时方面也无需担心，已经自动预装了docker、python、node、c/cpp等大部分语言的开发环境。</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">同时，如果在终端里启动程序的开发服务器时编辑器会自动发现开放的端口并映射到公网，默认是私有的，只有codespace的所有者才能访问，但是可以在图中的这个位置中更改穿透为对外公开，但是101奉劝各位早点死了用这个搭建什么服务的心吧，同GitHub一样，几乎是无法访问，在速度这方面，甚至比不上GitHub Pages。</p>\n</div>\n<p><a href=\"https://blog.redish101.top/article/github-codespace#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1655607124}, {"title": "你问我答 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2022-05-25 14:28:40", "link": "https://www.594594.xyz/2022/05/25/xqa/", "description": "<p>一个适用hoshinobot的你问我答插件</p>", "categories": ["hoshino插件", "功能拓展"], "time": 1653460120}, {"title": "适用小白的快速搭建QQ机器人的超详细教程(可选带马娘插件)2023-10-13更新", "author": "轻音时雨的博客", "pubDate": "2022-03-05 03:10:37", "link": "https://www.594594.xyz/2022/03/05/uma_bot/", "description": "<p>适用小白的快速搭建一个QQ机器人(可选带马娘插件)</p>", "categories": ["游戏相关", "教程", "赛马娘"], "time": 1646421037}, {"title": "docsify - 一个优雅的静态文档生成器", "author": "Redish101博客", "pubDate": "2022-03-04 16:00:00", "link": "https://blog.redish101.top/article/docsify", "description": "\n<p></p>\n<blockquote>本文该渲染由 reblog 前端生成，可能存在排版问题，最佳体验请前往：<a href=\"https://blog.redish101.top/article/docsify\">https://blog.redish101.top/article/docsify</a>\n</blockquote>\n<div>\n<h2>docsify好在哪里</h2>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">docsify相比于其他的静态文档站点生成器相比更加的简洁，易用。</p>\n<h4>Sphinx</h4>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">先拿Sphinx来说吧，Sphinx因背后有python的驱动，功能十分强大，但是rst的语法还是比较复杂的</p>\n<h4>Vuepress</h4>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">vuepress更适合大型项目的文档编写，而且维护成本高。</p>\n<h2>使用</h2>\n<h3>安装</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">全局安装Docsify-cli:</p>\n<pre class=\"language-bash lang-bash\"><code class=\"language-bash lang-bash\">yarn global add docsify-cli\n# 或者使用npm</code></pre>\n<h3>开始一个项目</h3>\n<pre class=\"language-bash lang-bash\"><code class=\"language-bash lang-bash\">docsify init &lt;项目路径&gt;</code></pre>\n<h3>配置</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">本文不再对配置方面进行过多的论述，可以参考<a href=\"https://docsify.js.org/#/zh-cn/configuration\" target=\"_blank\" class=\"link\" data-sentry-component=\"MLink\" data-sentry-source-file=\"Link.tsx\">配置项 (docsify.js.org)</a></p>\n<h3>编写</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">docsify会自动识别目录下的所有markdown文件，所以在docs目录新增markdown文件即可编写文档</p>\n<h4>路径问题</h4>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">这里要注意一下路径：</p>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">假设你的目录结构如下：</p>\n<pre class=\"language-text lang-text\"><code class=\"language-text lang-text\">.\n└── docs\n├── README.md\n├── guide.md\n└── zh-cn\n├── README.md\n└── guide.md</code></pre>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">那么渲染后的路径就是：</p>\n<pre class=\"language-text lang-text\"><code class=\"language-text lang-text\">docs/README.md        =&gt; http://domain.com\ndocs/guide.md         =&gt; http://domain.com/guide\ndocs/zh-cn/README.md  =&gt; http://domain.com/zh-cn/\ndocs/zh-cn/guide.md   =&gt; http://domain.com/zh-cn/guide</code></pre>\n<h2>部署</h2>\n<h3>Github Pages</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">将Github Pages的工作目录设置到docsify所在目录。</p>\n<h3>Vercel</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">选中docsify所在仓库，点击下面的deploy</p>\n<h3>服务器</h3>\n<p class=\"paragraph\" data-sentry-component=\"MParagraph\" data-sentry-source-file=\"Paragraph.tsx\">将docsify所在文件夹上传到网站目录即可</p>\n</div>\n<p><a href=\"https://blog.redish101.top/article/docsify#twikoo\">看完了？点击发送评论</a></p>\n", "categories": [], "time": 1646380800}, {"title": "马娘功能插件整合版v2.0.1 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2022-03-04 07:36:40", "link": "https://www.594594.xyz/2022/03/04/uma_plugin/", "description": "<p>一个适用hoshinobot的马娘功能插件整合版</p>", "categories": ["hoshino插件", "赛马娘"], "time": 1646350600}, {"title": "赛马娘模拟抽卡 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2022-02-05 03:43:40", "link": "https://www.594594.xyz/2022/02/05/uma_gacha_for_hoshino/", "description": "<p>一个适用hoshinobot的赛马娘模拟抽卡插件</p>", "categories": ["hoshino插件", "赛马娘"], "time": 1644003820}, {"title": "ZeroTier One搭建MOON服务器", "author": "轻音时雨的博客", "pubDate": "2022-02-03 03:30:40", "link": "https://www.594594.xyz/2022/02/03/moon_for_zerotier/", "description": "<p>完美解决Tabletop等和好友P2P联机延迟高的解决办法及相关踩坑</p>", "categories": ["游戏相关"], "time": 1643830240}, {"title": "Windows实用小工具教程", "author": "Utermux博客", "pubDate": "2022-01-23 07:55:00", "link": "https://blog.utermux.dev/win/Windows-utilities.html", "description": "Windows实用小工具教程", "categories": [], "time": 1642895700}, {"title": "UTermux/ZeroTermux/TermuxWatch下载链接", "author": "Utermux博客", "pubDate": "2021-12-26 06:53:00", "link": "https://blog.utermux.dev/ut/download.html", "description": "UTermux/ZeroTermux/TermuxWatch下载链接", "categories": [], "time": 1640472780}, {"title": "早安晚安 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2021-10-24 03:16:12", "link": "https://www.594594.xyz/2021/10/24/good_morning_for_hoshino/", "description": "<p>一个适用hoshinobot的 早安晚安 插件</p>", "categories": ["hoshino插件", "pcr"], "time": 1635016572}, {"title": "pcr签到黄历 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2021-10-24 03:09:12", "link": "https://www.594594.xyz/2021/10/24/pcr_almanac_for_hoshino/", "description": "<p>一个适用hoshinobot的 pcr签到黄历 插件</p>", "categories": ["hoshino插件", "pcr"], "time": 1635016152}, {"title": "mc数据查询监控 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2021-10-24 03:00:12", "link": "https://www.594594.xyz/2021/10/24/mc_status_for_hoshino/", "description": "<p>一个适用hoshinobot的 mc数据查询监控 插件</p>", "categories": ["hoshino插件", "mc"], "time": 1635015612}, {"title": "github仓库更新提醒 for HoshinoBot", "author": "轻音时雨的博客", "pubDate": "2021-08-23 04:00:12", "link": "https://www.594594.xyz/2021/08/23/github_reminder_for_hoshino/", "description": "<p>一个适用hoshinobot的 github仓库更新提醒 插件</p>", "categories": ["hoshino插件", "github"], "time": 1629662412}, {"title": "职场浮生纪修改器发布", "author": "小N同学的博客", "pubDate": "2021-08-08 17:59:53", "link": "https://www.imcharon.com/54/", "description": "先打开游戏，然后使用管理员身份启动修改器即可。 之前能改很多东西的，现在为什么只能加钱了。 -因为很多基址当时 […]", "categories": ["往日余生", "教程", "精选", "修改器", "职场浮生纪"], "time": 1628416793}]